-- ./src/tools/cbindgen.cy -o src/tools/llvm.cy src/tools/llvm.h -I/opt/homebrew/Cellar/llvm/17.0.6/include -libpath libLLVM.dylib -stripPrefix LLVM

-- CBINDGEN MARKER
-- Code below is generated by cbindgen.cy
type FatalErrorHandler -> *void

func InstallFatalErrorHandler(Handler *void) void:
    return lib.LLVMInstallFatalErrorHandler(Handler)
func ResetFatalErrorHandler() void:
    return lib.LLVMResetFatalErrorHandler()
func EnablePrettyStackTrace() void:
    return lib.LLVMEnablePrettyStackTrace()
type Bool -> int

type OpaqueMemoryBuffer_S #int64_t
type MemoryBufferRef -> *void

type OpaqueContext_S #int64_t
type ContextRef -> *void

type OpaqueModule_S #int64_t
type ModuleRef -> *void

type OpaqueType_S #int64_t
type TypeRef -> *void

type OpaqueValue_S #int64_t
type ValueRef -> *void

type OpaqueBasicBlock_S #int64_t
type BasicBlockRef -> *void

type OpaqueMetadata_S #int64_t
type MetadataRef -> *void

type OpaqueNamedMDNode_S #int64_t
type NamedMDNodeRef -> *void

type OpaqueValueMetadataEntry_S #int64_t
type ValueMetadataEntry -> OpaqueValueMetadataEntry_S

type OpaqueBuilder_S #int64_t
type BuilderRef -> *void

type OpaqueDIBuilder_S #int64_t
type DIBuilderRef -> *void

type OpaqueModuleProvider_S #int64_t
type ModuleProviderRef -> *void

type OpaquePassManager_S #int64_t
type PassManagerRef -> *void

type OpaqueUse_S #int64_t
type UseRef -> *void

type OpaqueAttributeRef_S #int64_t
type AttributeRef -> *void

type OpaqueDiagnosticInfo_S #int64_t
type DiagnosticInfoRef -> *void

type Comdat_S #int64_t
type ComdatRef -> *void

type OpaqueModuleFlagEntry_S #int64_t
type ModuleFlagEntry -> OpaqueModuleFlagEntry_S

type OpaqueJITEventListener_S #int64_t
type JITEventListenerRef -> *void

type OpaqueBinary_S #int64_t
type BinaryRef -> *void

type Opcode -> int
var .Ret int = 1
var .Br int = 2
var .Switch int = 3
var .IndirectBr int = 4
var .Invoke int = 5
var .Unreachable int = 7
var .CallBr int = 67
var .FNeg int = 66
var .Add int = 8
var .FAdd int = 9
var .Sub int = 10
var .FSub int = 11
var .Mul int = 12
var .FMul int = 13
var .UDiv int = 14
var .SDiv int = 15
var .FDiv int = 16
var .URem int = 17
var .SRem int = 18
var .FRem int = 19
var .Shl int = 20
var .LShr int = 21
var .AShr int = 22
var .And int = 23
var .Or int = 24
var .Xor int = 25
var .Alloca int = 26
var .Load int = 27
var .Store int = 28
var .GetElementPtr int = 29
var .Trunc int = 30
var .ZExt int = 31
var .SExt int = 32
var .FPToUI int = 33
var .FPToSI int = 34
var .UIToFP int = 35
var .SIToFP int = 36
var .FPTrunc int = 37
var .FPExt int = 38
var .PtrToInt int = 39
var .IntToPtr int = 40
var .BitCast int = 41
var .AddrSpaceCast int = 60
var .ICmp int = 42
var .FCmp int = 43
var .PHI int = 44
var .Call int = 45
var .Select int = 46
var .UserOp1 int = 47
var .UserOp2 int = 48
var .VAArg int = 49
var .ExtractElement int = 50
var .InsertElement int = 51
var .ShuffleVector int = 52
var .ExtractValue int = 53
var .InsertValue int = 54
var .Freeze int = 68
var .Fence int = 55
var .AtomicCmpXchg int = 56
var .AtomicRMW int = 57
var .Resume int = 58
var .LandingPad int = 59
var .CleanupRet int = 61
var .CatchRet int = 62
var .CatchPad int = 63
var .CleanupPad int = 64
var .CatchSwitch int = 65

type TypeKind -> int
var .VoidTypeKind int = 0
var .HalfTypeKind int = 1
var .FloatTypeKind int = 2
var .DoubleTypeKind int = 3
var .X86_FP80TypeKind int = 4
var .FP128TypeKind int = 5
var .PPC_FP128TypeKind int = 6
var .LabelTypeKind int = 7
var .IntegerTypeKind int = 8
var .FunctionTypeKind int = 9
var .StructTypeKind int = 10
var .ArrayTypeKind int = 11
var .PointerTypeKind int = 12
var .VectorTypeKind int = 13
var .MetadataTypeKind int = 14
var .X86_MMXTypeKind int = 15
var .TokenTypeKind int = 16
var .ScalableVectorTypeKind int = 17
var .BFloatTypeKind int = 18
var .X86_AMXTypeKind int = 19
var .TargetExtTypeKind int = 20

type Linkage -> int
var .ExternalLinkage int = 0
var .AvailableExternallyLinkage int = 1
var .LinkOnceAnyLinkage int = 2
var .LinkOnceODRLinkage int = 3
var .LinkOnceODRAutoHideLinkage int = 4
var .WeakAnyLinkage int = 5
var .WeakODRLinkage int = 6
var .AppendingLinkage int = 7
var .InternalLinkage int = 8
var .PrivateLinkage int = 9
var .DLLImportLinkage int = 10
var .DLLExportLinkage int = 11
var .ExternalWeakLinkage int = 12
var .GhostLinkage int = 13
var .CommonLinkage int = 14
var .LinkerPrivateLinkage int = 15
var .LinkerPrivateWeakLinkage int = 16

type Visibility -> int
var .DefaultVisibility int = 0
var .HiddenVisibility int = 1
var .ProtectedVisibility int = 2

type UnnamedAddr -> int
var .NoUnnamedAddr int = 0
var .LocalUnnamedAddr int = 1
var .GlobalUnnamedAddr int = 2

type DLLStorageClass -> int
var .DefaultStorageClass int = 0
var .DLLImportStorageClass int = 1
var .DLLExportStorageClass int = 2

type CallConv -> int
var .CCallConv int = 0
var .FastCallConv int = 8
var .ColdCallConv int = 9
var .GHCCallConv int = 10
var .HiPECallConv int = 11
var .WebKitJSCallConv int = 12
var .AnyRegCallConv int = 13
var .PreserveMostCallConv int = 14
var .PreserveAllCallConv int = 15
var .SwiftCallConv int = 16
var .CXXFASTTLSCallConv int = 17
var .X86StdcallCallConv int = 64
var .X86FastcallCallConv int = 65
var .ARMAPCSCallConv int = 66
var .ARMAAPCSCallConv int = 67
var .ARMAAPCSVFPCallConv int = 68
var .MSP430INTRCallConv int = 69
var .X86ThisCallCallConv int = 70
var .PTXKernelCallConv int = 71
var .PTXDeviceCallConv int = 72
var .SPIRFUNCCallConv int = 75
var .SPIRKERNELCallConv int = 76
var .IntelOCLBICallConv int = 77
var .X8664SysVCallConv int = 78
var .Win64CallConv int = 79
var .X86VectorCallCallConv int = 80
var .HHVMCallConv int = 81
var .HHVMCCallConv int = 82
var .X86INTRCallConv int = 83
var .AVRINTRCallConv int = 84
var .AVRSIGNALCallConv int = 85
var .AVRBUILTINCallConv int = 86
var .AMDGPUVSCallConv int = 87
var .AMDGPUGSCallConv int = 88
var .AMDGPUPSCallConv int = 89
var .AMDGPUCSCallConv int = 90
var .AMDGPUKERNELCallConv int = 91
var .X86RegCallCallConv int = 92
var .AMDGPUHSCallConv int = 93
var .MSP430BUILTINCallConv int = 94
var .AMDGPULSCallConv int = 95
var .AMDGPUESCallConv int = 96

type ValueKind -> int
var .ArgumentValueKind int = 0
var .BasicBlockValueKind int = 1
var .MemoryUseValueKind int = 2
var .MemoryDefValueKind int = 3
var .MemoryPhiValueKind int = 4
var .FunctionValueKind int = 5
var .GlobalAliasValueKind int = 6
var .GlobalIFuncValueKind int = 7
var .GlobalVariableValueKind int = 8
var .BlockAddressValueKind int = 9
var .ConstantExprValueKind int = 10
var .ConstantArrayValueKind int = 11
var .ConstantStructValueKind int = 12
var .ConstantVectorValueKind int = 13
var .UndefValueValueKind int = 14
var .ConstantAggregateZeroValueKind int = 15
var .ConstantDataArrayValueKind int = 16
var .ConstantDataVectorValueKind int = 17
var .ConstantIntValueKind int = 18
var .ConstantFPValueKind int = 19
var .ConstantPointerNullValueKind int = 20
var .ConstantTokenNoneValueKind int = 21
var .MetadataAsValueValueKind int = 22
var .InlineAsmValueKind int = 23
var .InstructionValueKind int = 24
var .PoisonValueValueKind int = 25
var .ConstantTargetNoneValueKind int = 26

type IntPredicate -> int
var .IntEQ int = 32
var .IntNE int = 33
var .IntUGT int = 34
var .IntUGE int = 35
var .IntULT int = 36
var .IntULE int = 37
var .IntSGT int = 38
var .IntSGE int = 39
var .IntSLT int = 40
var .IntSLE int = 41

type RealPredicate -> int
var .RealPredicateFalse int = 0
var .RealOEQ int = 1
var .RealOGT int = 2
var .RealOGE int = 3
var .RealOLT int = 4
var .RealOLE int = 5
var .RealONE int = 6
var .RealORD int = 7
var .RealUNO int = 8
var .RealUEQ int = 9
var .RealUGT int = 10
var .RealUGE int = 11
var .RealULT int = 12
var .RealULE int = 13
var .RealUNE int = 14
var .RealPredicateTrue int = 15

type LandingPadClauseTy -> int
var .LandingPadCatch int = 0
var .LandingPadFilter int = 1

type ThreadLocalMode -> int
var .NotThreadLocal int = 0
var .GeneralDynamicTLSModel int = 1
var .LocalDynamicTLSModel int = 2
var .InitialExecTLSModel int = 3
var .LocalExecTLSModel int = 4

type AtomicOrdering -> int
var .AtomicOrderingNotAtomic int = 0
var .AtomicOrderingUnordered int = 1
var .AtomicOrderingMonotonic int = 2
var .AtomicOrderingAcquire int = 4
var .AtomicOrderingRelease int = 5
var .AtomicOrderingAcquireRelease int = 6
var .AtomicOrderingSequentiallyConsistent int = 7

type AtomicRMWBinOp -> int
var .AtomicRMWBinOpXchg int = 0
var .AtomicRMWBinOpAdd int = 1
var .AtomicRMWBinOpSub int = 2
var .AtomicRMWBinOpAnd int = 3
var .AtomicRMWBinOpNand int = 4
var .AtomicRMWBinOpOr int = 5
var .AtomicRMWBinOpXor int = 6
var .AtomicRMWBinOpMax int = 7
var .AtomicRMWBinOpMin int = 8
var .AtomicRMWBinOpUMax int = 9
var .AtomicRMWBinOpUMin int = 10
var .AtomicRMWBinOpFAdd int = 11
var .AtomicRMWBinOpFSub int = 12
var .AtomicRMWBinOpFMax int = 13
var .AtomicRMWBinOpFMin int = 14

type DiagnosticSeverity -> int
var .DSError int = 0
var .DSWarning int = 1
var .DSRemark int = 2
var .DSNote int = 3

type InlineAsmDialect -> int
var .InlineAsmDialectATT int = 0
var .InlineAsmDialectIntel int = 1

type ModuleFlagBehavior -> int
var .ModuleFlagBehaviorError int = 0
var .ModuleFlagBehaviorWarning int = 1
var .ModuleFlagBehaviorRequire int = 2
var .ModuleFlagBehaviorOverride int = 3
var .ModuleFlagBehaviorAppend int = 4
var .ModuleFlagBehaviorAppendUnique int = 5

var .AttributeReturnIndex int = 0
var .AttributeFunctionIndex int = -1

type AttributeIndex -> int

func Shutdown() void:
    return lib.LLVMShutdown()
func GetVersion(Major *void, Minor *void, Patch *void) void:
    return lib.LLVMGetVersion(Major, Minor, Patch)
func CreateMessage(Message *void) *void:
    return lib.LLVMCreateMessage(Message)
func DisposeMessage(Message *void) void:
    return lib.LLVMDisposeMessage(Message)
type DiagnosticHandler -> *void

type YieldCallback -> *void

func ContextCreate() ContextRef:
    return lib.LLVMContextCreate()
func GetGlobalContext() ContextRef:
    return lib.LLVMGetGlobalContext()
func ContextSetDiagnosticHandler(C *void, Handler *void, DiagnosticContext *void) void:
    return lib.LLVMContextSetDiagnosticHandler(C, Handler, DiagnosticContext)
func ContextGetDiagnosticHandler(C *void) DiagnosticHandler:
    return lib.LLVMContextGetDiagnosticHandler(C)
func ContextGetDiagnosticContext(C *void) *void:
    return lib.LLVMContextGetDiagnosticContext(C)
func ContextSetYieldCallback(C *void, Callback *void, OpaqueHandle *void) void:
    return lib.LLVMContextSetYieldCallback(C, Callback, OpaqueHandle)
func ContextShouldDiscardValueNames(C *void) Bool:
    return lib.LLVMContextShouldDiscardValueNames(C)
func ContextSetDiscardValueNames(C *void, Discard Bool) void:
    return lib.LLVMContextSetDiscardValueNames(C, Discard)
func ContextDispose(C *void) void:
    return lib.LLVMContextDispose(C)
func GetDiagInfoDescription(DI *void) *void:
    return lib.LLVMGetDiagInfoDescription(DI)
func GetDiagInfoSeverity(DI *void) DiagnosticSeverity:
    return lib.LLVMGetDiagInfoSeverity(DI)
func GetMDKindIDInContext(C *void, Name *void, SLen int) int:
    return lib.LLVMGetMDKindIDInContext(C, Name, SLen)
func GetMDKindID(Name *void, SLen int) int:
    return lib.LLVMGetMDKindID(Name, SLen)
func GetEnumAttributeKindForName(Name *void, SLen int) int:
    return lib.LLVMGetEnumAttributeKindForName(Name, SLen)
func GetLastEnumAttributeKind() int:
    return lib.LLVMGetLastEnumAttributeKind()
func CreateEnumAttribute(C *void, KindID int, Val int) AttributeRef:
    return lib.LLVMCreateEnumAttribute(C, KindID, Val)
func GetEnumAttributeKind(A *void) int:
    return lib.LLVMGetEnumAttributeKind(A)
func GetEnumAttributeValue(A *void) int:
    return lib.LLVMGetEnumAttributeValue(A)
func CreateTypeAttribute(C *void, KindID int, type_ref *void) AttributeRef:
    return lib.LLVMCreateTypeAttribute(C, KindID, type_ref)
func GetTypeAttributeValue(A *void) TypeRef:
    return lib.LLVMGetTypeAttributeValue(A)
func CreateStringAttribute(C *void, K *void, KLength int, V *void, VLength int) AttributeRef:
    return lib.LLVMCreateStringAttribute(C, K, KLength, V, VLength)
func GetStringAttributeKind(A *void, Length *void) *void:
    return lib.LLVMGetStringAttributeKind(A, Length)
func GetStringAttributeValue(A *void, Length *void) *void:
    return lib.LLVMGetStringAttributeValue(A, Length)
func IsEnumAttribute(A *void) Bool:
    return lib.LLVMIsEnumAttribute(A)
func IsStringAttribute(A *void) Bool:
    return lib.LLVMIsStringAttribute(A)
func IsTypeAttribute(A *void) Bool:
    return lib.LLVMIsTypeAttribute(A)
func GetTypeByName2(C *void, Name *void) TypeRef:
    return lib.LLVMGetTypeByName2(C, Name)
func ModuleCreateWithName(ModuleID *void) ModuleRef:
    return lib.LLVMModuleCreateWithName(ModuleID)
func ModuleCreateWithNameInContext(ModuleID *void, C *void) ModuleRef:
    return lib.LLVMModuleCreateWithNameInContext(ModuleID, C)
func CloneModule(M *void) ModuleRef:
    return lib.LLVMCloneModule(M)
func DisposeModule(M *void) void:
    return lib.LLVMDisposeModule(M)
func GetModuleIdentifier(M *void, Len *void) *void:
    return lib.LLVMGetModuleIdentifier(M, Len)
func SetModuleIdentifier(M *void, Ident *void, Len int) void:
    return lib.LLVMSetModuleIdentifier(M, Ident, Len)
func GetSourceFileName(M *void, Len *void) *void:
    return lib.LLVMGetSourceFileName(M, Len)
func SetSourceFileName(M *void, Name *void, Len int) void:
    return lib.LLVMSetSourceFileName(M, Name, Len)
func GetDataLayoutStr(M *void) *void:
    return lib.LLVMGetDataLayoutStr(M)
func GetDataLayout(M *void) *void:
    return lib.LLVMGetDataLayout(M)
func SetDataLayout(M *void, DataLayoutStr *void) void:
    return lib.LLVMSetDataLayout(M, DataLayoutStr)
func GetTarget(M *void) *void:
    return lib.LLVMGetTarget(M)
func SetTarget(M *void, Triple *void) void:
    return lib.LLVMSetTarget(M, Triple)
func CopyModuleFlagsMetadata(M *void, Len *void) *void:
    return lib.LLVMCopyModuleFlagsMetadata(M, Len)
func DisposeModuleFlagsMetadata(Entries *void) void:
    return lib.LLVMDisposeModuleFlagsMetadata(Entries)
func ModuleFlagEntriesGetFlagBehavior(Entries *void, Index int) ModuleFlagBehavior:
    return lib.LLVMModuleFlagEntriesGetFlagBehavior(Entries, Index)
func ModuleFlagEntriesGetKey(Entries *void, Index int, Len *void) *void:
    return lib.LLVMModuleFlagEntriesGetKey(Entries, Index, Len)
func ModuleFlagEntriesGetMetadata(Entries *void, Index int) MetadataRef:
    return lib.LLVMModuleFlagEntriesGetMetadata(Entries, Index)
func GetModuleFlag(M *void, Key *void, KeyLen int) MetadataRef:
    return lib.LLVMGetModuleFlag(M, Key, KeyLen)
func AddModuleFlag(M *void, Behavior ModuleFlagBehavior, Key *void, KeyLen int, Val *void) void:
    return lib.LLVMAddModuleFlag(M, Behavior, Key, KeyLen, Val)
func DumpModule(M *void) void:
    return lib.LLVMDumpModule(M)
func PrintModuleToFile(M *void, Filename *void, ErrorMessage *void) Bool:
    return lib.LLVMPrintModuleToFile(M, Filename, ErrorMessage)
func PrintModuleToString(M *void) *void:
    return lib.LLVMPrintModuleToString(M)
func GetModuleInlineAsm(M *void, Len *void) *void:
    return lib.LLVMGetModuleInlineAsm(M, Len)
func SetModuleInlineAsm2(M *void, Asm *void, Len int) void:
    return lib.LLVMSetModuleInlineAsm2(M, Asm, Len)
func AppendModuleInlineAsm(M *void, Asm *void, Len int) void:
    return lib.LLVMAppendModuleInlineAsm(M, Asm, Len)
func GetInlineAsm(Ty *void, AsmString *void, AsmStringSize int, Constraints *void, ConstraintsSize int, HasSideEffects Bool, IsAlignStack Bool, Dialect InlineAsmDialect, CanThrow Bool) ValueRef:
    return lib.LLVMGetInlineAsm(Ty, AsmString, AsmStringSize, Constraints, ConstraintsSize, HasSideEffects, IsAlignStack, Dialect, CanThrow)
func GetModuleContext(M *void) ContextRef:
    return lib.LLVMGetModuleContext(M)
func GetTypeByName(M *void, Name *void) TypeRef:
    return lib.LLVMGetTypeByName(M, Name)
func GetFirstNamedMetadata(M *void) NamedMDNodeRef:
    return lib.LLVMGetFirstNamedMetadata(M)
func GetLastNamedMetadata(M *void) NamedMDNodeRef:
    return lib.LLVMGetLastNamedMetadata(M)
func GetNextNamedMetadata(NamedMDNode *void) NamedMDNodeRef:
    return lib.LLVMGetNextNamedMetadata(NamedMDNode)
func GetPreviousNamedMetadata(NamedMDNode *void) NamedMDNodeRef:
    return lib.LLVMGetPreviousNamedMetadata(NamedMDNode)
func GetNamedMetadata(M *void, Name *void, NameLen int) NamedMDNodeRef:
    return lib.LLVMGetNamedMetadata(M, Name, NameLen)
func GetOrInsertNamedMetadata(M *void, Name *void, NameLen int) NamedMDNodeRef:
    return lib.LLVMGetOrInsertNamedMetadata(M, Name, NameLen)
func GetNamedMetadataName(NamedMD *void, NameLen *void) *void:
    return lib.LLVMGetNamedMetadataName(NamedMD, NameLen)
func GetNamedMetadataNumOperands(M *void, Name *void) int:
    return lib.LLVMGetNamedMetadataNumOperands(M, Name)
func GetNamedMetadataOperands(M *void, Name *void, Dest *void) void:
    return lib.LLVMGetNamedMetadataOperands(M, Name, Dest)
func AddNamedMetadataOperand(M *void, Name *void, Val *void) void:
    return lib.LLVMAddNamedMetadataOperand(M, Name, Val)
func GetDebugLocDirectory(Val *void, Length *void) *void:
    return lib.LLVMGetDebugLocDirectory(Val, Length)
func GetDebugLocFilename(Val *void, Length *void) *void:
    return lib.LLVMGetDebugLocFilename(Val, Length)
func GetDebugLocLine(Val *void) int:
    return lib.LLVMGetDebugLocLine(Val)
func GetDebugLocColumn(Val *void) int:
    return lib.LLVMGetDebugLocColumn(Val)
func AddFunction(M *void, Name *void, FunctionTy *void) ValueRef:
    return lib.LLVMAddFunction(M, Name, FunctionTy)
func GetNamedFunction(M *void, Name *void) ValueRef:
    return lib.LLVMGetNamedFunction(M, Name)
func GetFirstFunction(M *void) ValueRef:
    return lib.LLVMGetFirstFunction(M)
func GetLastFunction(M *void) ValueRef:
    return lib.LLVMGetLastFunction(M)
func GetNextFunction(Fn *void) ValueRef:
    return lib.LLVMGetNextFunction(Fn)
func GetPreviousFunction(Fn *void) ValueRef:
    return lib.LLVMGetPreviousFunction(Fn)
func SetModuleInlineAsm(M *void, Asm *void) void:
    return lib.LLVMSetModuleInlineAsm(M, Asm)
func GetTypeKind(Ty *void) TypeKind:
    return lib.LLVMGetTypeKind(Ty)
func TypeIsSized(Ty *void) Bool:
    return lib.LLVMTypeIsSized(Ty)
func GetTypeContext(Ty *void) ContextRef:
    return lib.LLVMGetTypeContext(Ty)
func DumpType(Val *void) void:
    return lib.LLVMDumpType(Val)
func PrintTypeToString(Val *void) *void:
    return lib.LLVMPrintTypeToString(Val)
func Int1TypeInContext(C *void) TypeRef:
    return lib.LLVMInt1TypeInContext(C)
func Int8TypeInContext(C *void) TypeRef:
    return lib.LLVMInt8TypeInContext(C)
func Int16TypeInContext(C *void) TypeRef:
    return lib.LLVMInt16TypeInContext(C)
func Int32TypeInContext(C *void) TypeRef:
    return lib.LLVMInt32TypeInContext(C)
func Int64TypeInContext(C *void) TypeRef:
    return lib.LLVMInt64TypeInContext(C)
func Int128TypeInContext(C *void) TypeRef:
    return lib.LLVMInt128TypeInContext(C)
func IntTypeInContext(C *void, NumBits int) TypeRef:
    return lib.LLVMIntTypeInContext(C, NumBits)
func Int1Type() TypeRef:
    return lib.LLVMInt1Type()
func Int8Type() TypeRef:
    return lib.LLVMInt8Type()
func Int16Type() TypeRef:
    return lib.LLVMInt16Type()
func Int32Type() TypeRef:
    return lib.LLVMInt32Type()
func Int64Type() TypeRef:
    return lib.LLVMInt64Type()
func Int128Type() TypeRef:
    return lib.LLVMInt128Type()
func IntType(NumBits int) TypeRef:
    return lib.LLVMIntType(NumBits)
func GetIntTypeWidth(IntegerTy *void) int:
    return lib.LLVMGetIntTypeWidth(IntegerTy)
func HalfTypeInContext(C *void) TypeRef:
    return lib.LLVMHalfTypeInContext(C)
func BFloatTypeInContext(C *void) TypeRef:
    return lib.LLVMBFloatTypeInContext(C)
func FloatTypeInContext(C *void) TypeRef:
    return lib.LLVMFloatTypeInContext(C)
func DoubleTypeInContext(C *void) TypeRef:
    return lib.LLVMDoubleTypeInContext(C)
func X86FP80TypeInContext(C *void) TypeRef:
    return lib.LLVMX86FP80TypeInContext(C)
func FP128TypeInContext(C *void) TypeRef:
    return lib.LLVMFP128TypeInContext(C)
func PPCFP128TypeInContext(C *void) TypeRef:
    return lib.LLVMPPCFP128TypeInContext(C)
func HalfType() TypeRef:
    return lib.LLVMHalfType()
func BFloatType() TypeRef:
    return lib.LLVMBFloatType()
func FloatType() TypeRef:
    return lib.LLVMFloatType()
func DoubleType() TypeRef:
    return lib.LLVMDoubleType()
func X86FP80Type() TypeRef:
    return lib.LLVMX86FP80Type()
func FP128Type() TypeRef:
    return lib.LLVMFP128Type()
func PPCFP128Type() TypeRef:
    return lib.LLVMPPCFP128Type()
func FunctionType(ReturnType *void, ParamTypes *void, ParamCount int, IsVarArg Bool) TypeRef:
    return lib.LLVMFunctionType(ReturnType, ParamTypes, ParamCount, IsVarArg)
func IsFunctionVarArg(FunctionTy *void) Bool:
    return lib.LLVMIsFunctionVarArg(FunctionTy)
func GetReturnType(FunctionTy *void) TypeRef:
    return lib.LLVMGetReturnType(FunctionTy)
func CountParamTypes(FunctionTy *void) int:
    return lib.LLVMCountParamTypes(FunctionTy)
func GetParamTypes(FunctionTy *void, Dest *void) void:
    return lib.LLVMGetParamTypes(FunctionTy, Dest)
func StructTypeInContext(C *void, ElementTypes *void, ElementCount int, Packed Bool) TypeRef:
    return lib.LLVMStructTypeInContext(C, ElementTypes, ElementCount, Packed)
func StructType(ElementTypes *void, ElementCount int, Packed Bool) TypeRef:
    return lib.LLVMStructType(ElementTypes, ElementCount, Packed)
func StructCreateNamed(C *void, Name *void) TypeRef:
    return lib.LLVMStructCreateNamed(C, Name)
func GetStructName(Ty *void) *void:
    return lib.LLVMGetStructName(Ty)
func StructSetBody(StructTy *void, ElementTypes *void, ElementCount int, Packed Bool) void:
    return lib.LLVMStructSetBody(StructTy, ElementTypes, ElementCount, Packed)
func CountStructElementTypes(StructTy *void) int:
    return lib.LLVMCountStructElementTypes(StructTy)
func GetStructElementTypes(StructTy *void, Dest *void) void:
    return lib.LLVMGetStructElementTypes(StructTy, Dest)
func StructGetTypeAtIndex(StructTy *void, i int) TypeRef:
    return lib.LLVMStructGetTypeAtIndex(StructTy, i)
func IsPackedStruct(StructTy *void) Bool:
    return lib.LLVMIsPackedStruct(StructTy)
func IsOpaqueStruct(StructTy *void) Bool:
    return lib.LLVMIsOpaqueStruct(StructTy)
func IsLiteralStruct(StructTy *void) Bool:
    return lib.LLVMIsLiteralStruct(StructTy)
func GetElementType(Ty *void) TypeRef:
    return lib.LLVMGetElementType(Ty)
func GetSubtypes(Tp *void, Arr *void) void:
    return lib.LLVMGetSubtypes(Tp, Arr)
func GetNumContainedTypes(Tp *void) int:
    return lib.LLVMGetNumContainedTypes(Tp)
func ArrayType(ElementType *void, ElementCount int) TypeRef:
    return lib.LLVMArrayType(ElementType, ElementCount)
func ArrayType2(ElementType *void, ElementCount int) TypeRef:
    return lib.LLVMArrayType2(ElementType, ElementCount)
func GetArrayLength(ArrayTy *void) int:
    return lib.LLVMGetArrayLength(ArrayTy)
func GetArrayLength2(ArrayTy *void) int:
    return lib.LLVMGetArrayLength2(ArrayTy)
func PointerType(ElementType *void, AddressSpace int) TypeRef:
    return lib.LLVMPointerType(ElementType, AddressSpace)
func PointerTypeIsOpaque(Ty *void) Bool:
    return lib.LLVMPointerTypeIsOpaque(Ty)
func PointerTypeInContext(C *void, AddressSpace int) TypeRef:
    return lib.LLVMPointerTypeInContext(C, AddressSpace)
func GetPointerAddressSpace(PointerTy *void) int:
    return lib.LLVMGetPointerAddressSpace(PointerTy)
func VectorType(ElementType *void, ElementCount int) TypeRef:
    return lib.LLVMVectorType(ElementType, ElementCount)
func ScalableVectorType(ElementType *void, ElementCount int) TypeRef:
    return lib.LLVMScalableVectorType(ElementType, ElementCount)
func GetVectorSize(VectorTy *void) int:
    return lib.LLVMGetVectorSize(VectorTy)
func VoidTypeInContext(C *void) TypeRef:
    return lib.LLVMVoidTypeInContext(C)
func LabelTypeInContext(C *void) TypeRef:
    return lib.LLVMLabelTypeInContext(C)
func X86MMXTypeInContext(C *void) TypeRef:
    return lib.LLVMX86MMXTypeInContext(C)
func X86AMXTypeInContext(C *void) TypeRef:
    return lib.LLVMX86AMXTypeInContext(C)
func TokenTypeInContext(C *void) TypeRef:
    return lib.LLVMTokenTypeInContext(C)
func MetadataTypeInContext(C *void) TypeRef:
    return lib.LLVMMetadataTypeInContext(C)
func VoidType() TypeRef:
    return lib.LLVMVoidType()
func LabelType() TypeRef:
    return lib.LLVMLabelType()
func X86MMXType() TypeRef:
    return lib.LLVMX86MMXType()
func X86AMXType() TypeRef:
    return lib.LLVMX86AMXType()
func TargetExtTypeInContext(C *void, Name *void, TypeParams *void, TypeParamCount int, IntParams *void, IntParamCount int) TypeRef:
    return lib.LLVMTargetExtTypeInContext(C, Name, TypeParams, TypeParamCount, IntParams, IntParamCount)
func TypeOf(Val *void) TypeRef:
    return lib.LLVMTypeOf(Val)
func GetValueKind(Val *void) ValueKind:
    return lib.LLVMGetValueKind(Val)
func GetValueName2(Val *void, Length *void) *void:
    return lib.LLVMGetValueName2(Val, Length)
func SetValueName2(Val *void, Name *void, NameLen int) void:
    return lib.LLVMSetValueName2(Val, Name, NameLen)
func DumpValue(Val *void) void:
    return lib.LLVMDumpValue(Val)
func PrintValueToString(Val *void) *void:
    return lib.LLVMPrintValueToString(Val)
func ReplaceAllUsesWith(OldVal *void, NewVal *void) void:
    return lib.LLVMReplaceAllUsesWith(OldVal, NewVal)
func IsConstant(Val *void) Bool:
    return lib.LLVMIsConstant(Val)
func IsUndef(Val *void) Bool:
    return lib.LLVMIsUndef(Val)
func IsPoison(Val *void) Bool:
    return lib.LLVMIsPoison(Val)
func IsAArgument(Val *void) ValueRef:
    return lib.LLVMIsAArgument(Val)
func IsABasicBlock(Val *void) ValueRef:
    return lib.LLVMIsABasicBlock(Val)
func IsAInlineAsm(Val *void) ValueRef:
    return lib.LLVMIsAInlineAsm(Val)
func IsAUser(Val *void) ValueRef:
    return lib.LLVMIsAUser(Val)
func IsAConstant(Val *void) ValueRef:
    return lib.LLVMIsAConstant(Val)
func IsABlockAddress(Val *void) ValueRef:
    return lib.LLVMIsABlockAddress(Val)
func IsAConstantAggregateZero(Val *void) ValueRef:
    return lib.LLVMIsAConstantAggregateZero(Val)
func IsAConstantArray(Val *void) ValueRef:
    return lib.LLVMIsAConstantArray(Val)
func IsAConstantDataSequential(Val *void) ValueRef:
    return lib.LLVMIsAConstantDataSequential(Val)
func IsAConstantDataArray(Val *void) ValueRef:
    return lib.LLVMIsAConstantDataArray(Val)
func IsAConstantDataVector(Val *void) ValueRef:
    return lib.LLVMIsAConstantDataVector(Val)
func IsAConstantExpr(Val *void) ValueRef:
    return lib.LLVMIsAConstantExpr(Val)
func IsAConstantFP(Val *void) ValueRef:
    return lib.LLVMIsAConstantFP(Val)
func IsAConstantInt(Val *void) ValueRef:
    return lib.LLVMIsAConstantInt(Val)
func IsAConstantPointerNull(Val *void) ValueRef:
    return lib.LLVMIsAConstantPointerNull(Val)
func IsAConstantStruct(Val *void) ValueRef:
    return lib.LLVMIsAConstantStruct(Val)
func IsAConstantTokenNone(Val *void) ValueRef:
    return lib.LLVMIsAConstantTokenNone(Val)
func IsAConstantVector(Val *void) ValueRef:
    return lib.LLVMIsAConstantVector(Val)
func IsAGlobalValue(Val *void) ValueRef:
    return lib.LLVMIsAGlobalValue(Val)
func IsAGlobalAlias(Val *void) ValueRef:
    return lib.LLVMIsAGlobalAlias(Val)
func IsAGlobalObject(Val *void) ValueRef:
    return lib.LLVMIsAGlobalObject(Val)
func IsAFunction(Val *void) ValueRef:
    return lib.LLVMIsAFunction(Val)
func IsAGlobalVariable(Val *void) ValueRef:
    return lib.LLVMIsAGlobalVariable(Val)
func IsAGlobalIFunc(Val *void) ValueRef:
    return lib.LLVMIsAGlobalIFunc(Val)
func IsAUndefValue(Val *void) ValueRef:
    return lib.LLVMIsAUndefValue(Val)
func IsAPoisonValue(Val *void) ValueRef:
    return lib.LLVMIsAPoisonValue(Val)
func IsAInstruction(Val *void) ValueRef:
    return lib.LLVMIsAInstruction(Val)
func IsAUnaryOperator(Val *void) ValueRef:
    return lib.LLVMIsAUnaryOperator(Val)
func IsABinaryOperator(Val *void) ValueRef:
    return lib.LLVMIsABinaryOperator(Val)
func IsACallInst(Val *void) ValueRef:
    return lib.LLVMIsACallInst(Val)
func IsAIntrinsicInst(Val *void) ValueRef:
    return lib.LLVMIsAIntrinsicInst(Val)
func IsADbgInfoIntrinsic(Val *void) ValueRef:
    return lib.LLVMIsADbgInfoIntrinsic(Val)
func IsADbgVariableIntrinsic(Val *void) ValueRef:
    return lib.LLVMIsADbgVariableIntrinsic(Val)
func IsADbgDeclareInst(Val *void) ValueRef:
    return lib.LLVMIsADbgDeclareInst(Val)
func IsADbgLabelInst(Val *void) ValueRef:
    return lib.LLVMIsADbgLabelInst(Val)
func IsAMemIntrinsic(Val *void) ValueRef:
    return lib.LLVMIsAMemIntrinsic(Val)
func IsAMemCpyInst(Val *void) ValueRef:
    return lib.LLVMIsAMemCpyInst(Val)
func IsAMemMoveInst(Val *void) ValueRef:
    return lib.LLVMIsAMemMoveInst(Val)
func IsAMemSetInst(Val *void) ValueRef:
    return lib.LLVMIsAMemSetInst(Val)
func IsACmpInst(Val *void) ValueRef:
    return lib.LLVMIsACmpInst(Val)
func IsAFCmpInst(Val *void) ValueRef:
    return lib.LLVMIsAFCmpInst(Val)
func IsAICmpInst(Val *void) ValueRef:
    return lib.LLVMIsAICmpInst(Val)
func IsAExtractElementInst(Val *void) ValueRef:
    return lib.LLVMIsAExtractElementInst(Val)
func IsAGetElementPtrInst(Val *void) ValueRef:
    return lib.LLVMIsAGetElementPtrInst(Val)
func IsAInsertElementInst(Val *void) ValueRef:
    return lib.LLVMIsAInsertElementInst(Val)
func IsAInsertValueInst(Val *void) ValueRef:
    return lib.LLVMIsAInsertValueInst(Val)
func IsALandingPadInst(Val *void) ValueRef:
    return lib.LLVMIsALandingPadInst(Val)
func IsAPHINode(Val *void) ValueRef:
    return lib.LLVMIsAPHINode(Val)
func IsASelectInst(Val *void) ValueRef:
    return lib.LLVMIsASelectInst(Val)
func IsAShuffleVectorInst(Val *void) ValueRef:
    return lib.LLVMIsAShuffleVectorInst(Val)
func IsAStoreInst(Val *void) ValueRef:
    return lib.LLVMIsAStoreInst(Val)
func IsABranchInst(Val *void) ValueRef:
    return lib.LLVMIsABranchInst(Val)
func IsAIndirectBrInst(Val *void) ValueRef:
    return lib.LLVMIsAIndirectBrInst(Val)
func IsAInvokeInst(Val *void) ValueRef:
    return lib.LLVMIsAInvokeInst(Val)
func IsAReturnInst(Val *void) ValueRef:
    return lib.LLVMIsAReturnInst(Val)
func IsASwitchInst(Val *void) ValueRef:
    return lib.LLVMIsASwitchInst(Val)
func IsAUnreachableInst(Val *void) ValueRef:
    return lib.LLVMIsAUnreachableInst(Val)
func IsAResumeInst(Val *void) ValueRef:
    return lib.LLVMIsAResumeInst(Val)
func IsACleanupReturnInst(Val *void) ValueRef:
    return lib.LLVMIsACleanupReturnInst(Val)
func IsACatchReturnInst(Val *void) ValueRef:
    return lib.LLVMIsACatchReturnInst(Val)
func IsACatchSwitchInst(Val *void) ValueRef:
    return lib.LLVMIsACatchSwitchInst(Val)
func IsACallBrInst(Val *void) ValueRef:
    return lib.LLVMIsACallBrInst(Val)
func IsAFuncletPadInst(Val *void) ValueRef:
    return lib.LLVMIsAFuncletPadInst(Val)
func IsACatchPadInst(Val *void) ValueRef:
    return lib.LLVMIsACatchPadInst(Val)
func IsACleanupPadInst(Val *void) ValueRef:
    return lib.LLVMIsACleanupPadInst(Val)
func IsAUnaryInstruction(Val *void) ValueRef:
    return lib.LLVMIsAUnaryInstruction(Val)
func IsAAllocaInst(Val *void) ValueRef:
    return lib.LLVMIsAAllocaInst(Val)
func IsACastInst(Val *void) ValueRef:
    return lib.LLVMIsACastInst(Val)
func IsAAddrSpaceCastInst(Val *void) ValueRef:
    return lib.LLVMIsAAddrSpaceCastInst(Val)
func IsABitCastInst(Val *void) ValueRef:
    return lib.LLVMIsABitCastInst(Val)
func IsAFPExtInst(Val *void) ValueRef:
    return lib.LLVMIsAFPExtInst(Val)
func IsAFPToSIInst(Val *void) ValueRef:
    return lib.LLVMIsAFPToSIInst(Val)
func IsAFPToUIInst(Val *void) ValueRef:
    return lib.LLVMIsAFPToUIInst(Val)
func IsAFPTruncInst(Val *void) ValueRef:
    return lib.LLVMIsAFPTruncInst(Val)
func IsAIntToPtrInst(Val *void) ValueRef:
    return lib.LLVMIsAIntToPtrInst(Val)
func IsAPtrToIntInst(Val *void) ValueRef:
    return lib.LLVMIsAPtrToIntInst(Val)
func IsASExtInst(Val *void) ValueRef:
    return lib.LLVMIsASExtInst(Val)
func IsASIToFPInst(Val *void) ValueRef:
    return lib.LLVMIsASIToFPInst(Val)
func IsATruncInst(Val *void) ValueRef:
    return lib.LLVMIsATruncInst(Val)
func IsAUIToFPInst(Val *void) ValueRef:
    return lib.LLVMIsAUIToFPInst(Val)
func IsAZExtInst(Val *void) ValueRef:
    return lib.LLVMIsAZExtInst(Val)
func IsAExtractValueInst(Val *void) ValueRef:
    return lib.LLVMIsAExtractValueInst(Val)
func IsALoadInst(Val *void) ValueRef:
    return lib.LLVMIsALoadInst(Val)
func IsAVAArgInst(Val *void) ValueRef:
    return lib.LLVMIsAVAArgInst(Val)
func IsAFreezeInst(Val *void) ValueRef:
    return lib.LLVMIsAFreezeInst(Val)
func IsAAtomicCmpXchgInst(Val *void) ValueRef:
    return lib.LLVMIsAAtomicCmpXchgInst(Val)
func IsAAtomicRMWInst(Val *void) ValueRef:
    return lib.LLVMIsAAtomicRMWInst(Val)
func IsAFenceInst(Val *void) ValueRef:
    return lib.LLVMIsAFenceInst(Val)
func IsAMDNode(Val *void) ValueRef:
    return lib.LLVMIsAMDNode(Val)
func IsAValueAsMetadata(Val *void) ValueRef:
    return lib.LLVMIsAValueAsMetadata(Val)
func IsAMDString(Val *void) ValueRef:
    return lib.LLVMIsAMDString(Val)
func GetValueName(Val *void) *void:
    return lib.LLVMGetValueName(Val)
func SetValueName(Val *void, Name *void) void:
    return lib.LLVMSetValueName(Val, Name)
func GetFirstUse(Val *void) UseRef:
    return lib.LLVMGetFirstUse(Val)
func GetNextUse(U *void) UseRef:
    return lib.LLVMGetNextUse(U)
func GetUser(U *void) ValueRef:
    return lib.LLVMGetUser(U)
func GetUsedValue(U *void) ValueRef:
    return lib.LLVMGetUsedValue(U)
func GetOperand(Val *void, Index int) ValueRef:
    return lib.LLVMGetOperand(Val, Index)
func GetOperandUse(Val *void, Index int) UseRef:
    return lib.LLVMGetOperandUse(Val, Index)
func SetOperand(User *void, Index int, Val *void) void:
    return lib.LLVMSetOperand(User, Index, Val)
func GetNumOperands(Val *void) int:
    return lib.LLVMGetNumOperands(Val)
func ConstNull(Ty *void) ValueRef:
    return lib.LLVMConstNull(Ty)
func ConstAllOnes(Ty *void) ValueRef:
    return lib.LLVMConstAllOnes(Ty)
func GetUndef(Ty *void) ValueRef:
    return lib.LLVMGetUndef(Ty)
func GetPoison(Ty *void) ValueRef:
    return lib.LLVMGetPoison(Ty)
func IsNull(Val *void) Bool:
    return lib.LLVMIsNull(Val)
func ConstPointerNull(Ty *void) ValueRef:
    return lib.LLVMConstPointerNull(Ty)
func ConstInt(IntTy *void, N int, SignExtend Bool) ValueRef:
    return lib.LLVMConstInt(IntTy, N, SignExtend)
func ConstIntOfArbitraryPrecision(IntTy *void, NumWords int, Words *void) ValueRef:
    return lib.LLVMConstIntOfArbitraryPrecision(IntTy, NumWords, Words)
func ConstIntOfString(IntTy *void, Text *void, Radix int) ValueRef:
    return lib.LLVMConstIntOfString(IntTy, Text, Radix)
func ConstIntOfStringAndSize(IntTy *void, Text *void, SLen int, Radix int) ValueRef:
    return lib.LLVMConstIntOfStringAndSize(IntTy, Text, SLen, Radix)
func ConstReal(RealTy *void, N float) ValueRef:
    return lib.LLVMConstReal(RealTy, N)
func ConstRealOfString(RealTy *void, Text *void) ValueRef:
    return lib.LLVMConstRealOfString(RealTy, Text)
func ConstRealOfStringAndSize(RealTy *void, Text *void, SLen int) ValueRef:
    return lib.LLVMConstRealOfStringAndSize(RealTy, Text, SLen)
func ConstIntGetZExtValue(ConstantVal *void) int:
    return lib.LLVMConstIntGetZExtValue(ConstantVal)
func ConstIntGetSExtValue(ConstantVal *void) int:
    return lib.LLVMConstIntGetSExtValue(ConstantVal)
func ConstRealGetDouble(ConstantVal *void, losesInfo *void) float:
    return lib.LLVMConstRealGetDouble(ConstantVal, losesInfo)
func ConstStringInContext(C *void, Str *void, Length int, DontNullTerminate Bool) ValueRef:
    return lib.LLVMConstStringInContext(C, Str, Length, DontNullTerminate)
func ConstString(Str *void, Length int, DontNullTerminate Bool) ValueRef:
    return lib.LLVMConstString(Str, Length, DontNullTerminate)
func IsConstantString(c *void) Bool:
    return lib.LLVMIsConstantString(c)
func GetAsString(c *void, Length *void) *void:
    return lib.LLVMGetAsString(c, Length)
func ConstStructInContext(C *void, ConstantVals *void, Count int, Packed Bool) ValueRef:
    return lib.LLVMConstStructInContext(C, ConstantVals, Count, Packed)
func ConstStruct(ConstantVals *void, Count int, Packed Bool) ValueRef:
    return lib.LLVMConstStruct(ConstantVals, Count, Packed)
func ConstArray(ElementTy *void, ConstantVals *void, Length int) ValueRef:
    return lib.LLVMConstArray(ElementTy, ConstantVals, Length)
func ConstArray2(ElementTy *void, ConstantVals *void, Length int) ValueRef:
    return lib.LLVMConstArray2(ElementTy, ConstantVals, Length)
func ConstNamedStruct(StructTy *void, ConstantVals *void, Count int) ValueRef:
    return lib.LLVMConstNamedStruct(StructTy, ConstantVals, Count)
func GetAggregateElement(C *void, Idx int) ValueRef:
    return lib.LLVMGetAggregateElement(C, Idx)
func GetElementAsConstant(C *void, idx int) ValueRef:
    return lib.LLVMGetElementAsConstant(C, idx)
func ConstVector(ScalarConstantVals *void, Size int) ValueRef:
    return lib.LLVMConstVector(ScalarConstantVals, Size)
func GetConstOpcode(ConstantVal *void) Opcode:
    return lib.LLVMGetConstOpcode(ConstantVal)
func AlignOf(Ty *void) ValueRef:
    return lib.LLVMAlignOf(Ty)
func SizeOf(Ty *void) ValueRef:
    return lib.LLVMSizeOf(Ty)
func ConstNeg(ConstantVal *void) ValueRef:
    return lib.LLVMConstNeg(ConstantVal)
func ConstNSWNeg(ConstantVal *void) ValueRef:
    return lib.LLVMConstNSWNeg(ConstantVal)
func ConstNUWNeg(ConstantVal *void) ValueRef:
    return lib.LLVMConstNUWNeg(ConstantVal)
func ConstNot(ConstantVal *void) ValueRef:
    return lib.LLVMConstNot(ConstantVal)
func ConstAdd(LHSConstant *void, RHSConstant *void) ValueRef:
    return lib.LLVMConstAdd(LHSConstant, RHSConstant)
func ConstNSWAdd(LHSConstant *void, RHSConstant *void) ValueRef:
    return lib.LLVMConstNSWAdd(LHSConstant, RHSConstant)
func ConstNUWAdd(LHSConstant *void, RHSConstant *void) ValueRef:
    return lib.LLVMConstNUWAdd(LHSConstant, RHSConstant)
func ConstSub(LHSConstant *void, RHSConstant *void) ValueRef:
    return lib.LLVMConstSub(LHSConstant, RHSConstant)
func ConstNSWSub(LHSConstant *void, RHSConstant *void) ValueRef:
    return lib.LLVMConstNSWSub(LHSConstant, RHSConstant)
func ConstNUWSub(LHSConstant *void, RHSConstant *void) ValueRef:
    return lib.LLVMConstNUWSub(LHSConstant, RHSConstant)
func ConstMul(LHSConstant *void, RHSConstant *void) ValueRef:
    return lib.LLVMConstMul(LHSConstant, RHSConstant)
func ConstNSWMul(LHSConstant *void, RHSConstant *void) ValueRef:
    return lib.LLVMConstNSWMul(LHSConstant, RHSConstant)
func ConstNUWMul(LHSConstant *void, RHSConstant *void) ValueRef:
    return lib.LLVMConstNUWMul(LHSConstant, RHSConstant)
func ConstAnd(LHSConstant *void, RHSConstant *void) ValueRef:
    return lib.LLVMConstAnd(LHSConstant, RHSConstant)
func ConstOr(LHSConstant *void, RHSConstant *void) ValueRef:
    return lib.LLVMConstOr(LHSConstant, RHSConstant)
func ConstXor(LHSConstant *void, RHSConstant *void) ValueRef:
    return lib.LLVMConstXor(LHSConstant, RHSConstant)
func ConstICmp(Predicate IntPredicate, LHSConstant *void, RHSConstant *void) ValueRef:
    return lib.LLVMConstICmp(Predicate, LHSConstant, RHSConstant)
func ConstFCmp(Predicate RealPredicate, LHSConstant *void, RHSConstant *void) ValueRef:
    return lib.LLVMConstFCmp(Predicate, LHSConstant, RHSConstant)
func ConstShl(LHSConstant *void, RHSConstant *void) ValueRef:
    return lib.LLVMConstShl(LHSConstant, RHSConstant)
func ConstLShr(LHSConstant *void, RHSConstant *void) ValueRef:
    return lib.LLVMConstLShr(LHSConstant, RHSConstant)
func ConstAShr(LHSConstant *void, RHSConstant *void) ValueRef:
    return lib.LLVMConstAShr(LHSConstant, RHSConstant)
func ConstGEP2(Ty *void, ConstantVal *void, ConstantIndices *void, NumIndices int) ValueRef:
    return lib.LLVMConstGEP2(Ty, ConstantVal, ConstantIndices, NumIndices)
func ConstInBoundsGEP2(Ty *void, ConstantVal *void, ConstantIndices *void, NumIndices int) ValueRef:
    return lib.LLVMConstInBoundsGEP2(Ty, ConstantVal, ConstantIndices, NumIndices)
func ConstTrunc(ConstantVal *void, ToType *void) ValueRef:
    return lib.LLVMConstTrunc(ConstantVal, ToType)
func ConstSExt(ConstantVal *void, ToType *void) ValueRef:
    return lib.LLVMConstSExt(ConstantVal, ToType)
func ConstZExt(ConstantVal *void, ToType *void) ValueRef:
    return lib.LLVMConstZExt(ConstantVal, ToType)
func ConstFPTrunc(ConstantVal *void, ToType *void) ValueRef:
    return lib.LLVMConstFPTrunc(ConstantVal, ToType)
func ConstFPExt(ConstantVal *void, ToType *void) ValueRef:
    return lib.LLVMConstFPExt(ConstantVal, ToType)
func ConstUIToFP(ConstantVal *void, ToType *void) ValueRef:
    return lib.LLVMConstUIToFP(ConstantVal, ToType)
func ConstSIToFP(ConstantVal *void, ToType *void) ValueRef:
    return lib.LLVMConstSIToFP(ConstantVal, ToType)
func ConstFPToUI(ConstantVal *void, ToType *void) ValueRef:
    return lib.LLVMConstFPToUI(ConstantVal, ToType)
func ConstFPToSI(ConstantVal *void, ToType *void) ValueRef:
    return lib.LLVMConstFPToSI(ConstantVal, ToType)
func ConstPtrToInt(ConstantVal *void, ToType *void) ValueRef:
    return lib.LLVMConstPtrToInt(ConstantVal, ToType)
func ConstIntToPtr(ConstantVal *void, ToType *void) ValueRef:
    return lib.LLVMConstIntToPtr(ConstantVal, ToType)
func ConstBitCast(ConstantVal *void, ToType *void) ValueRef:
    return lib.LLVMConstBitCast(ConstantVal, ToType)
func ConstAddrSpaceCast(ConstantVal *void, ToType *void) ValueRef:
    return lib.LLVMConstAddrSpaceCast(ConstantVal, ToType)
func ConstZExtOrBitCast(ConstantVal *void, ToType *void) ValueRef:
    return lib.LLVMConstZExtOrBitCast(ConstantVal, ToType)
func ConstSExtOrBitCast(ConstantVal *void, ToType *void) ValueRef:
    return lib.LLVMConstSExtOrBitCast(ConstantVal, ToType)
func ConstTruncOrBitCast(ConstantVal *void, ToType *void) ValueRef:
    return lib.LLVMConstTruncOrBitCast(ConstantVal, ToType)
func ConstPointerCast(ConstantVal *void, ToType *void) ValueRef:
    return lib.LLVMConstPointerCast(ConstantVal, ToType)
func ConstIntCast(ConstantVal *void, ToType *void, isSigned Bool) ValueRef:
    return lib.LLVMConstIntCast(ConstantVal, ToType, isSigned)
func ConstFPCast(ConstantVal *void, ToType *void) ValueRef:
    return lib.LLVMConstFPCast(ConstantVal, ToType)
func ConstExtractElement(VectorConstant *void, IndexConstant *void) ValueRef:
    return lib.LLVMConstExtractElement(VectorConstant, IndexConstant)
func ConstInsertElement(VectorConstant *void, ElementValueConstant *void, IndexConstant *void) ValueRef:
    return lib.LLVMConstInsertElement(VectorConstant, ElementValueConstant, IndexConstant)
func ConstShuffleVector(VectorAConstant *void, VectorBConstant *void, MaskConstant *void) ValueRef:
    return lib.LLVMConstShuffleVector(VectorAConstant, VectorBConstant, MaskConstant)
func BlockAddress(F *void, BB *void) ValueRef:
    return lib.LLVMBlockAddress(F, BB)
func ConstInlineAsm(Ty *void, AsmString *void, Constraints *void, HasSideEffects Bool, IsAlignStack Bool) ValueRef:
    return lib.LLVMConstInlineAsm(Ty, AsmString, Constraints, HasSideEffects, IsAlignStack)
func GetGlobalParent(Global *void) ModuleRef:
    return lib.LLVMGetGlobalParent(Global)
func IsDeclaration(Global *void) Bool:
    return lib.LLVMIsDeclaration(Global)
func GetLinkage(Global *void) Linkage:
    return lib.LLVMGetLinkage(Global)
func SetLinkage(Global *void, Linkage Linkage) void:
    return lib.LLVMSetLinkage(Global, Linkage)
func GetSection(Global *void) *void:
    return lib.LLVMGetSection(Global)
func SetSection(Global *void, Section *void) void:
    return lib.LLVMSetSection(Global, Section)
func GetVisibility(Global *void) Visibility:
    return lib.LLVMGetVisibility(Global)
func SetVisibility(Global *void, Viz Visibility) void:
    return lib.LLVMSetVisibility(Global, Viz)
func GetDLLStorageClass(Global *void) DLLStorageClass:
    return lib.LLVMGetDLLStorageClass(Global)
func SetDLLStorageClass(Global *void, Class DLLStorageClass) void:
    return lib.LLVMSetDLLStorageClass(Global, Class)
func GetUnnamedAddress(Global *void) UnnamedAddr:
    return lib.LLVMGetUnnamedAddress(Global)
func SetUnnamedAddress(Global *void, UnnamedAddr UnnamedAddr) void:
    return lib.LLVMSetUnnamedAddress(Global, UnnamedAddr)
func GlobalGetValueType(Global *void) TypeRef:
    return lib.LLVMGlobalGetValueType(Global)
func HasUnnamedAddr(Global *void) Bool:
    return lib.LLVMHasUnnamedAddr(Global)
func SetUnnamedAddr(Global *void, HasUnnamedAddr Bool) void:
    return lib.LLVMSetUnnamedAddr(Global, HasUnnamedAddr)
func GetAlignment(V *void) int:
    return lib.LLVMGetAlignment(V)
func SetAlignment(V *void, Bytes int) void:
    return lib.LLVMSetAlignment(V, Bytes)
func GlobalSetMetadata(Global *void, Kind int, MD *void) void:
    return lib.LLVMGlobalSetMetadata(Global, Kind, MD)
func GlobalEraseMetadata(Global *void, Kind int) void:
    return lib.LLVMGlobalEraseMetadata(Global, Kind)
func GlobalClearMetadata(Global *void) void:
    return lib.LLVMGlobalClearMetadata(Global)
func GlobalCopyAllMetadata(Value *void, NumEntries *void) *void:
    return lib.LLVMGlobalCopyAllMetadata(Value, NumEntries)
func DisposeValueMetadataEntries(Entries *void) void:
    return lib.LLVMDisposeValueMetadataEntries(Entries)
func ValueMetadataEntriesGetKind(Entries *void, Index int) int:
    return lib.LLVMValueMetadataEntriesGetKind(Entries, Index)
func ValueMetadataEntriesGetMetadata(Entries *void, Index int) MetadataRef:
    return lib.LLVMValueMetadataEntriesGetMetadata(Entries, Index)
func AddGlobal(M *void, Ty *void, Name *void) ValueRef:
    return lib.LLVMAddGlobal(M, Ty, Name)
func AddGlobalInAddressSpace(M *void, Ty *void, Name *void, AddressSpace int) ValueRef:
    return lib.LLVMAddGlobalInAddressSpace(M, Ty, Name, AddressSpace)
func GetNamedGlobal(M *void, Name *void) ValueRef:
    return lib.LLVMGetNamedGlobal(M, Name)
func GetFirstGlobal(M *void) ValueRef:
    return lib.LLVMGetFirstGlobal(M)
func GetLastGlobal(M *void) ValueRef:
    return lib.LLVMGetLastGlobal(M)
func GetNextGlobal(GlobalVar *void) ValueRef:
    return lib.LLVMGetNextGlobal(GlobalVar)
func GetPreviousGlobal(GlobalVar *void) ValueRef:
    return lib.LLVMGetPreviousGlobal(GlobalVar)
func DeleteGlobal(GlobalVar *void) void:
    return lib.LLVMDeleteGlobal(GlobalVar)
func GetInitializer(GlobalVar *void) ValueRef:
    return lib.LLVMGetInitializer(GlobalVar)
func SetInitializer(GlobalVar *void, ConstantVal *void) void:
    return lib.LLVMSetInitializer(GlobalVar, ConstantVal)
func IsThreadLocal(GlobalVar *void) Bool:
    return lib.LLVMIsThreadLocal(GlobalVar)
func SetThreadLocal(GlobalVar *void, IsThreadLocal Bool) void:
    return lib.LLVMSetThreadLocal(GlobalVar, IsThreadLocal)
func IsGlobalConstant(GlobalVar *void) Bool:
    return lib.LLVMIsGlobalConstant(GlobalVar)
func SetGlobalConstant(GlobalVar *void, IsConstant Bool) void:
    return lib.LLVMSetGlobalConstant(GlobalVar, IsConstant)
func GetThreadLocalMode(GlobalVar *void) ThreadLocalMode:
    return lib.LLVMGetThreadLocalMode(GlobalVar)
func SetThreadLocalMode(GlobalVar *void, Mode ThreadLocalMode) void:
    return lib.LLVMSetThreadLocalMode(GlobalVar, Mode)
func IsExternallyInitialized(GlobalVar *void) Bool:
    return lib.LLVMIsExternallyInitialized(GlobalVar)
func SetExternallyInitialized(GlobalVar *void, IsExtInit Bool) void:
    return lib.LLVMSetExternallyInitialized(GlobalVar, IsExtInit)
func AddAlias2(M *void, ValueTy *void, AddrSpace int, Aliasee *void, Name *void) ValueRef:
    return lib.LLVMAddAlias2(M, ValueTy, AddrSpace, Aliasee, Name)
func GetNamedGlobalAlias(M *void, Name *void, NameLen int) ValueRef:
    return lib.LLVMGetNamedGlobalAlias(M, Name, NameLen)
func GetFirstGlobalAlias(M *void) ValueRef:
    return lib.LLVMGetFirstGlobalAlias(M)
func GetLastGlobalAlias(M *void) ValueRef:
    return lib.LLVMGetLastGlobalAlias(M)
func GetNextGlobalAlias(GA *void) ValueRef:
    return lib.LLVMGetNextGlobalAlias(GA)
func GetPreviousGlobalAlias(GA *void) ValueRef:
    return lib.LLVMGetPreviousGlobalAlias(GA)
func AliasGetAliasee(Alias *void) ValueRef:
    return lib.LLVMAliasGetAliasee(Alias)
func AliasSetAliasee(Alias *void, Aliasee *void) void:
    return lib.LLVMAliasSetAliasee(Alias, Aliasee)
func DeleteFunction(Fn *void) void:
    return lib.LLVMDeleteFunction(Fn)
func HasPersonalityFn(Fn *void) Bool:
    return lib.LLVMHasPersonalityFn(Fn)
func GetPersonalityFn(Fn *void) ValueRef:
    return lib.LLVMGetPersonalityFn(Fn)
func SetPersonalityFn(Fn *void, PersonalityFn *void) void:
    return lib.LLVMSetPersonalityFn(Fn, PersonalityFn)
func LookupIntrinsicID(Name *void, NameLen int) int:
    return lib.LLVMLookupIntrinsicID(Name, NameLen)
func GetIntrinsicID(Fn *void) int:
    return lib.LLVMGetIntrinsicID(Fn)
func GetIntrinsicDeclaration(Mod *void, ID int, ParamTypes *void, ParamCount int) ValueRef:
    return lib.LLVMGetIntrinsicDeclaration(Mod, ID, ParamTypes, ParamCount)
func IntrinsicGetType(Ctx *void, ID int, ParamTypes *void, ParamCount int) TypeRef:
    return lib.LLVMIntrinsicGetType(Ctx, ID, ParamTypes, ParamCount)
func IntrinsicGetName(ID int, NameLength *void) *void:
    return lib.LLVMIntrinsicGetName(ID, NameLength)
func IntrinsicCopyOverloadedName(ID int, ParamTypes *void, ParamCount int, NameLength *void) *void:
    return lib.LLVMIntrinsicCopyOverloadedName(ID, ParamTypes, ParamCount, NameLength)
func IntrinsicCopyOverloadedName2(Mod *void, ID int, ParamTypes *void, ParamCount int, NameLength *void) *void:
    return lib.LLVMIntrinsicCopyOverloadedName2(Mod, ID, ParamTypes, ParamCount, NameLength)
func IntrinsicIsOverloaded(ID int) Bool:
    return lib.LLVMIntrinsicIsOverloaded(ID)
func GetFunctionCallConv(Fn *void) int:
    return lib.LLVMGetFunctionCallConv(Fn)
func SetFunctionCallConv(Fn *void, CC int) void:
    return lib.LLVMSetFunctionCallConv(Fn, CC)
func GetGC(Fn *void) *void:
    return lib.LLVMGetGC(Fn)
func SetGC(Fn *void, Name *void) void:
    return lib.LLVMSetGC(Fn, Name)
func AddAttributeAtIndex(F *void, Idx AttributeIndex, A *void) void:
    return lib.LLVMAddAttributeAtIndex(F, Idx, A)
func GetAttributeCountAtIndex(F *void, Idx AttributeIndex) int:
    return lib.LLVMGetAttributeCountAtIndex(F, Idx)
func GetAttributesAtIndex(F *void, Idx AttributeIndex, Attrs *void) void:
    return lib.LLVMGetAttributesAtIndex(F, Idx, Attrs)
func GetEnumAttributeAtIndex(F *void, Idx AttributeIndex, KindID int) AttributeRef:
    return lib.LLVMGetEnumAttributeAtIndex(F, Idx, KindID)
func GetStringAttributeAtIndex(F *void, Idx AttributeIndex, K *void, KLen int) AttributeRef:
    return lib.LLVMGetStringAttributeAtIndex(F, Idx, K, KLen)
func RemoveEnumAttributeAtIndex(F *void, Idx AttributeIndex, KindID int) void:
    return lib.LLVMRemoveEnumAttributeAtIndex(F, Idx, KindID)
func RemoveStringAttributeAtIndex(F *void, Idx AttributeIndex, K *void, KLen int) void:
    return lib.LLVMRemoveStringAttributeAtIndex(F, Idx, K, KLen)
func AddTargetDependentFunctionAttr(Fn *void, A *void, V *void) void:
    return lib.LLVMAddTargetDependentFunctionAttr(Fn, A, V)
func CountParams(Fn *void) int:
    return lib.LLVMCountParams(Fn)
func GetParams(Fn *void, Params *void) void:
    return lib.LLVMGetParams(Fn, Params)
func GetParam(Fn *void, Index int) ValueRef:
    return lib.LLVMGetParam(Fn, Index)
func GetParamParent(Inst *void) ValueRef:
    return lib.LLVMGetParamParent(Inst)
func GetFirstParam(Fn *void) ValueRef:
    return lib.LLVMGetFirstParam(Fn)
func GetLastParam(Fn *void) ValueRef:
    return lib.LLVMGetLastParam(Fn)
func GetNextParam(Arg *void) ValueRef:
    return lib.LLVMGetNextParam(Arg)
func GetPreviousParam(Arg *void) ValueRef:
    return lib.LLVMGetPreviousParam(Arg)
func SetParamAlignment(Arg *void, Align int) void:
    return lib.LLVMSetParamAlignment(Arg, Align)
func AddGlobalIFunc(M *void, Name *void, NameLen int, Ty *void, AddrSpace int, Resolver *void) ValueRef:
    return lib.LLVMAddGlobalIFunc(M, Name, NameLen, Ty, AddrSpace, Resolver)
func GetNamedGlobalIFunc(M *void, Name *void, NameLen int) ValueRef:
    return lib.LLVMGetNamedGlobalIFunc(M, Name, NameLen)
func GetFirstGlobalIFunc(M *void) ValueRef:
    return lib.LLVMGetFirstGlobalIFunc(M)
func GetLastGlobalIFunc(M *void) ValueRef:
    return lib.LLVMGetLastGlobalIFunc(M)
func GetNextGlobalIFunc(IFunc *void) ValueRef:
    return lib.LLVMGetNextGlobalIFunc(IFunc)
func GetPreviousGlobalIFunc(IFunc *void) ValueRef:
    return lib.LLVMGetPreviousGlobalIFunc(IFunc)
func GetGlobalIFuncResolver(IFunc *void) ValueRef:
    return lib.LLVMGetGlobalIFuncResolver(IFunc)
func SetGlobalIFuncResolver(IFunc *void, Resolver *void) void:
    return lib.LLVMSetGlobalIFuncResolver(IFunc, Resolver)
func EraseGlobalIFunc(IFunc *void) void:
    return lib.LLVMEraseGlobalIFunc(IFunc)
func RemoveGlobalIFunc(IFunc *void) void:
    return lib.LLVMRemoveGlobalIFunc(IFunc)
func MDStringInContext2(C *void, Str *void, SLen int) MetadataRef:
    return lib.LLVMMDStringInContext2(C, Str, SLen)
func MDNodeInContext2(C *void, MDs *void, Count int) MetadataRef:
    return lib.LLVMMDNodeInContext2(C, MDs, Count)
func MetadataAsValue(C *void, MD *void) ValueRef:
    return lib.LLVMMetadataAsValue(C, MD)
func ValueAsMetadata(Val *void) MetadataRef:
    return lib.LLVMValueAsMetadata(Val)
func GetMDString(V *void, Length *void) *void:
    return lib.LLVMGetMDString(V, Length)
func GetMDNodeNumOperands(V *void) int:
    return lib.LLVMGetMDNodeNumOperands(V)
func GetMDNodeOperands(V *void, Dest *void) void:
    return lib.LLVMGetMDNodeOperands(V, Dest)
func ReplaceMDNodeOperandWith(V *void, Index int, Replacement *void) void:
    return lib.LLVMReplaceMDNodeOperandWith(V, Index, Replacement)
func MDStringInContext(C *void, Str *void, SLen int) ValueRef:
    return lib.LLVMMDStringInContext(C, Str, SLen)
func MDString(Str *void, SLen int) ValueRef:
    return lib.LLVMMDString(Str, SLen)
func MDNodeInContext(C *void, Vals *void, Count int) ValueRef:
    return lib.LLVMMDNodeInContext(C, Vals, Count)
func MDNode(Vals *void, Count int) ValueRef:
    return lib.LLVMMDNode(Vals, Count)
func BasicBlockAsValue(BB *void) ValueRef:
    return lib.LLVMBasicBlockAsValue(BB)
func ValueIsBasicBlock(Val *void) Bool:
    return lib.LLVMValueIsBasicBlock(Val)
func ValueAsBasicBlock(Val *void) BasicBlockRef:
    return lib.LLVMValueAsBasicBlock(Val)
func GetBasicBlockName(BB *void) *void:
    return lib.LLVMGetBasicBlockName(BB)
func GetBasicBlockParent(BB *void) ValueRef:
    return lib.LLVMGetBasicBlockParent(BB)
func GetBasicBlockTerminator(BB *void) ValueRef:
    return lib.LLVMGetBasicBlockTerminator(BB)
func CountBasicBlocks(Fn *void) int:
    return lib.LLVMCountBasicBlocks(Fn)
func GetBasicBlocks(Fn *void, BasicBlocks *void) void:
    return lib.LLVMGetBasicBlocks(Fn, BasicBlocks)
func GetFirstBasicBlock(Fn *void) BasicBlockRef:
    return lib.LLVMGetFirstBasicBlock(Fn)
func GetLastBasicBlock(Fn *void) BasicBlockRef:
    return lib.LLVMGetLastBasicBlock(Fn)
func GetNextBasicBlock(BB *void) BasicBlockRef:
    return lib.LLVMGetNextBasicBlock(BB)
func GetPreviousBasicBlock(BB *void) BasicBlockRef:
    return lib.LLVMGetPreviousBasicBlock(BB)
func GetEntryBasicBlock(Fn *void) BasicBlockRef:
    return lib.LLVMGetEntryBasicBlock(Fn)
func InsertExistingBasicBlockAfterInsertBlock(Builder *void, BB *void) void:
    return lib.LLVMInsertExistingBasicBlockAfterInsertBlock(Builder, BB)
func AppendExistingBasicBlock(Fn *void, BB *void) void:
    return lib.LLVMAppendExistingBasicBlock(Fn, BB)
func CreateBasicBlockInContext(C *void, Name *void) BasicBlockRef:
    return lib.LLVMCreateBasicBlockInContext(C, Name)
func AppendBasicBlockInContext(C *void, Fn *void, Name *void) BasicBlockRef:
    return lib.LLVMAppendBasicBlockInContext(C, Fn, Name)
func AppendBasicBlock(Fn *void, Name *void) BasicBlockRef:
    return lib.LLVMAppendBasicBlock(Fn, Name)
func InsertBasicBlockInContext(C *void, BB *void, Name *void) BasicBlockRef:
    return lib.LLVMInsertBasicBlockInContext(C, BB, Name)
func InsertBasicBlock(InsertBeforeBB *void, Name *void) BasicBlockRef:
    return lib.LLVMInsertBasicBlock(InsertBeforeBB, Name)
func DeleteBasicBlock(BB *void) void:
    return lib.LLVMDeleteBasicBlock(BB)
func RemoveBasicBlockFromParent(BB *void) void:
    return lib.LLVMRemoveBasicBlockFromParent(BB)
func MoveBasicBlockBefore(BB *void, MovePos *void) void:
    return lib.LLVMMoveBasicBlockBefore(BB, MovePos)
func MoveBasicBlockAfter(BB *void, MovePos *void) void:
    return lib.LLVMMoveBasicBlockAfter(BB, MovePos)
func GetFirstInstruction(BB *void) ValueRef:
    return lib.LLVMGetFirstInstruction(BB)
func GetLastInstruction(BB *void) ValueRef:
    return lib.LLVMGetLastInstruction(BB)
func HasMetadata(Val *void) int:
    return lib.LLVMHasMetadata(Val)
func GetMetadata(Val *void, KindID int) ValueRef:
    return lib.LLVMGetMetadata(Val, KindID)
func SetMetadata(Val *void, KindID int, Node *void) void:
    return lib.LLVMSetMetadata(Val, KindID, Node)
func InstructionGetAllMetadataOtherThanDebugLoc(Instr *void, NumEntries *void) *void:
    return lib.LLVMInstructionGetAllMetadataOtherThanDebugLoc(Instr, NumEntries)
func GetInstructionParent(Inst *void) BasicBlockRef:
    return lib.LLVMGetInstructionParent(Inst)
func GetNextInstruction(Inst *void) ValueRef:
    return lib.LLVMGetNextInstruction(Inst)
func GetPreviousInstruction(Inst *void) ValueRef:
    return lib.LLVMGetPreviousInstruction(Inst)
func InstructionRemoveFromParent(Inst *void) void:
    return lib.LLVMInstructionRemoveFromParent(Inst)
func InstructionEraseFromParent(Inst *void) void:
    return lib.LLVMInstructionEraseFromParent(Inst)
func DeleteInstruction(Inst *void) void:
    return lib.LLVMDeleteInstruction(Inst)
func GetInstructionOpcode(Inst *void) Opcode:
    return lib.LLVMGetInstructionOpcode(Inst)
func GetICmpPredicate(Inst *void) IntPredicate:
    return lib.LLVMGetICmpPredicate(Inst)
func GetFCmpPredicate(Inst *void) RealPredicate:
    return lib.LLVMGetFCmpPredicate(Inst)
func InstructionClone(Inst *void) ValueRef:
    return lib.LLVMInstructionClone(Inst)
func IsATerminatorInst(Inst *void) ValueRef:
    return lib.LLVMIsATerminatorInst(Inst)
func GetNumArgOperands(Instr *void) int:
    return lib.LLVMGetNumArgOperands(Instr)
func SetInstructionCallConv(Instr *void, CC int) void:
    return lib.LLVMSetInstructionCallConv(Instr, CC)
func GetInstructionCallConv(Instr *void) int:
    return lib.LLVMGetInstructionCallConv(Instr)
func SetInstrParamAlignment(Instr *void, Idx AttributeIndex, Align int) void:
    return lib.LLVMSetInstrParamAlignment(Instr, Idx, Align)
func AddCallSiteAttribute(C *void, Idx AttributeIndex, A *void) void:
    return lib.LLVMAddCallSiteAttribute(C, Idx, A)
func GetCallSiteAttributeCount(C *void, Idx AttributeIndex) int:
    return lib.LLVMGetCallSiteAttributeCount(C, Idx)
func GetCallSiteAttributes(C *void, Idx AttributeIndex, Attrs *void) void:
    return lib.LLVMGetCallSiteAttributes(C, Idx, Attrs)
func GetCallSiteEnumAttribute(C *void, Idx AttributeIndex, KindID int) AttributeRef:
    return lib.LLVMGetCallSiteEnumAttribute(C, Idx, KindID)
func GetCallSiteStringAttribute(C *void, Idx AttributeIndex, K *void, KLen int) AttributeRef:
    return lib.LLVMGetCallSiteStringAttribute(C, Idx, K, KLen)
func RemoveCallSiteEnumAttribute(C *void, Idx AttributeIndex, KindID int) void:
    return lib.LLVMRemoveCallSiteEnumAttribute(C, Idx, KindID)
func RemoveCallSiteStringAttribute(C *void, Idx AttributeIndex, K *void, KLen int) void:
    return lib.LLVMRemoveCallSiteStringAttribute(C, Idx, K, KLen)
func GetCalledFunctionType(C *void) TypeRef:
    return lib.LLVMGetCalledFunctionType(C)
func GetCalledValue(Instr *void) ValueRef:
    return lib.LLVMGetCalledValue(Instr)
func IsTailCall(CallInst *void) Bool:
    return lib.LLVMIsTailCall(CallInst)
func SetTailCall(CallInst *void, IsTailCall Bool) void:
    return lib.LLVMSetTailCall(CallInst, IsTailCall)
func GetNormalDest(InvokeInst *void) BasicBlockRef:
    return lib.LLVMGetNormalDest(InvokeInst)
func GetUnwindDest(InvokeInst *void) BasicBlockRef:
    return lib.LLVMGetUnwindDest(InvokeInst)
func SetNormalDest(InvokeInst *void, B *void) void:
    return lib.LLVMSetNormalDest(InvokeInst, B)
func SetUnwindDest(InvokeInst *void, B *void) void:
    return lib.LLVMSetUnwindDest(InvokeInst, B)
func GetNumSuccessors(Term *void) int:
    return lib.LLVMGetNumSuccessors(Term)
func GetSuccessor(Term *void, i int) BasicBlockRef:
    return lib.LLVMGetSuccessor(Term, i)
func SetSuccessor(Term *void, i int, block *void) void:
    return lib.LLVMSetSuccessor(Term, i, block)
func IsConditional(Branch *void) Bool:
    return lib.LLVMIsConditional(Branch)
func GetCondition(Branch *void) ValueRef:
    return lib.LLVMGetCondition(Branch)
func SetCondition(Branch *void, Cond *void) void:
    return lib.LLVMSetCondition(Branch, Cond)
func GetSwitchDefaultDest(SwitchInstr *void) BasicBlockRef:
    return lib.LLVMGetSwitchDefaultDest(SwitchInstr)
func GetAllocatedType(Alloca *void) TypeRef:
    return lib.LLVMGetAllocatedType(Alloca)
func IsInBounds(GEP *void) Bool:
    return lib.LLVMIsInBounds(GEP)
func SetIsInBounds(GEP *void, InBounds Bool) void:
    return lib.LLVMSetIsInBounds(GEP, InBounds)
func GetGEPSourceElementType(GEP *void) TypeRef:
    return lib.LLVMGetGEPSourceElementType(GEP)
func AddIncoming(PhiNode *void, IncomingValues *void, IncomingBlocks *void, Count int) void:
    return lib.LLVMAddIncoming(PhiNode, IncomingValues, IncomingBlocks, Count)
func CountIncoming(PhiNode *void) int:
    return lib.LLVMCountIncoming(PhiNode)
func GetIncomingValue(PhiNode *void, Index int) ValueRef:
    return lib.LLVMGetIncomingValue(PhiNode, Index)
func GetIncomingBlock(PhiNode *void, Index int) BasicBlockRef:
    return lib.LLVMGetIncomingBlock(PhiNode, Index)
func GetNumIndices(Inst *void) int:
    return lib.LLVMGetNumIndices(Inst)
func GetIndices(Inst *void) *void:
    return lib.LLVMGetIndices(Inst)
func CreateBuilderInContext(C *void) BuilderRef:
    return lib.LLVMCreateBuilderInContext(C)
func CreateBuilder() BuilderRef:
    return lib.LLVMCreateBuilder()
func PositionBuilder(Builder *void, Block *void, Instr *void) void:
    return lib.LLVMPositionBuilder(Builder, Block, Instr)
func PositionBuilderBefore(Builder *void, Instr *void) void:
    return lib.LLVMPositionBuilderBefore(Builder, Instr)
func PositionBuilderAtEnd(Builder *void, Block *void) void:
    return lib.LLVMPositionBuilderAtEnd(Builder, Block)
func GetInsertBlock(Builder *void) BasicBlockRef:
    return lib.LLVMGetInsertBlock(Builder)
func ClearInsertionPosition(Builder *void) void:
    return lib.LLVMClearInsertionPosition(Builder)
func InsertIntoBuilder(Builder *void, Instr *void) void:
    return lib.LLVMInsertIntoBuilder(Builder, Instr)
func InsertIntoBuilderWithName(Builder *void, Instr *void, Name *void) void:
    return lib.LLVMInsertIntoBuilderWithName(Builder, Instr, Name)
func DisposeBuilder(Builder *void) void:
    return lib.LLVMDisposeBuilder(Builder)
func GetCurrentDebugLocation2(Builder *void) MetadataRef:
    return lib.LLVMGetCurrentDebugLocation2(Builder)
func SetCurrentDebugLocation2(Builder *void, Loc *void) void:
    return lib.LLVMSetCurrentDebugLocation2(Builder, Loc)
func SetInstDebugLocation(Builder *void, Inst *void) void:
    return lib.LLVMSetInstDebugLocation(Builder, Inst)
func AddMetadataToInst(Builder *void, Inst *void) void:
    return lib.LLVMAddMetadataToInst(Builder, Inst)
func BuilderGetDefaultFPMathTag(Builder *void) MetadataRef:
    return lib.LLVMBuilderGetDefaultFPMathTag(Builder)
func BuilderSetDefaultFPMathTag(Builder *void, FPMathTag *void) void:
    return lib.LLVMBuilderSetDefaultFPMathTag(Builder, FPMathTag)
func SetCurrentDebugLocation(Builder *void, L *void) void:
    return lib.LLVMSetCurrentDebugLocation(Builder, L)
func GetCurrentDebugLocation(Builder *void) ValueRef:
    return lib.LLVMGetCurrentDebugLocation(Builder)
func BuildRetVoid(param0 *void) ValueRef:
    return lib.LLVMBuildRetVoid(param0)
func BuildRet(param0 *void, V *void) ValueRef:
    return lib.LLVMBuildRet(param0, V)
func BuildAggregateRet(param0 *void, RetVals *void, N int) ValueRef:
    return lib.LLVMBuildAggregateRet(param0, RetVals, N)
func BuildBr(param0 *void, Dest *void) ValueRef:
    return lib.LLVMBuildBr(param0, Dest)
func BuildCondBr(param0 *void, If *void, Then *void, Else *void) ValueRef:
    return lib.LLVMBuildCondBr(param0, If, Then, Else)
func BuildSwitch(param0 *void, V *void, Else *void, NumCases int) ValueRef:
    return lib.LLVMBuildSwitch(param0, V, Else, NumCases)
func BuildIndirectBr(B *void, Addr *void, NumDests int) ValueRef:
    return lib.LLVMBuildIndirectBr(B, Addr, NumDests)
func BuildInvoke2(param0 *void, Ty *void, Fn *void, Args *void, NumArgs int, Then *void, Catch *void, Name *void) ValueRef:
    return lib.LLVMBuildInvoke2(param0, Ty, Fn, Args, NumArgs, Then, Catch, Name)
func BuildUnreachable(param0 *void) ValueRef:
    return lib.LLVMBuildUnreachable(param0)
func BuildResume(B *void, Exn *void) ValueRef:
    return lib.LLVMBuildResume(B, Exn)
func BuildLandingPad(B *void, Ty *void, PersFn *void, NumClauses int, Name *void) ValueRef:
    return lib.LLVMBuildLandingPad(B, Ty, PersFn, NumClauses, Name)
func BuildCleanupRet(B *void, CatchPad *void, BB *void) ValueRef:
    return lib.LLVMBuildCleanupRet(B, CatchPad, BB)
func BuildCatchRet(B *void, CatchPad *void, BB *void) ValueRef:
    return lib.LLVMBuildCatchRet(B, CatchPad, BB)
func BuildCatchPad(B *void, ParentPad *void, Args *void, NumArgs int, Name *void) ValueRef:
    return lib.LLVMBuildCatchPad(B, ParentPad, Args, NumArgs, Name)
func BuildCleanupPad(B *void, ParentPad *void, Args *void, NumArgs int, Name *void) ValueRef:
    return lib.LLVMBuildCleanupPad(B, ParentPad, Args, NumArgs, Name)
func BuildCatchSwitch(B *void, ParentPad *void, UnwindBB *void, NumHandlers int, Name *void) ValueRef:
    return lib.LLVMBuildCatchSwitch(B, ParentPad, UnwindBB, NumHandlers, Name)
func AddCase(Switch *void, OnVal *void, Dest *void) void:
    return lib.LLVMAddCase(Switch, OnVal, Dest)
func AddDestination(IndirectBr *void, Dest *void) void:
    return lib.LLVMAddDestination(IndirectBr, Dest)
func GetNumClauses(LandingPad *void) int:
    return lib.LLVMGetNumClauses(LandingPad)
func GetClause(LandingPad *void, Idx int) ValueRef:
    return lib.LLVMGetClause(LandingPad, Idx)
func AddClause(LandingPad *void, ClauseVal *void) void:
    return lib.LLVMAddClause(LandingPad, ClauseVal)
func IsCleanup(LandingPad *void) Bool:
    return lib.LLVMIsCleanup(LandingPad)
func SetCleanup(LandingPad *void, Val Bool) void:
    return lib.LLVMSetCleanup(LandingPad, Val)
func AddHandler(CatchSwitch *void, Dest *void) void:
    return lib.LLVMAddHandler(CatchSwitch, Dest)
func GetNumHandlers(CatchSwitch *void) int:
    return lib.LLVMGetNumHandlers(CatchSwitch)
func GetHandlers(CatchSwitch *void, Handlers *void) void:
    return lib.LLVMGetHandlers(CatchSwitch, Handlers)
func GetArgOperand(Funclet *void, i int) ValueRef:
    return lib.LLVMGetArgOperand(Funclet, i)
func SetArgOperand(Funclet *void, i int, value *void) void:
    return lib.LLVMSetArgOperand(Funclet, i, value)
func GetParentCatchSwitch(CatchPad *void) ValueRef:
    return lib.LLVMGetParentCatchSwitch(CatchPad)
func SetParentCatchSwitch(CatchPad *void, CatchSwitch *void) void:
    return lib.LLVMSetParentCatchSwitch(CatchPad, CatchSwitch)
func BuildAdd(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildAdd(param0, LHS, RHS, Name)
func BuildNSWAdd(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildNSWAdd(param0, LHS, RHS, Name)
func BuildNUWAdd(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildNUWAdd(param0, LHS, RHS, Name)
func BuildFAdd(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildFAdd(param0, LHS, RHS, Name)
func BuildSub(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildSub(param0, LHS, RHS, Name)
func BuildNSWSub(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildNSWSub(param0, LHS, RHS, Name)
func BuildNUWSub(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildNUWSub(param0, LHS, RHS, Name)
func BuildFSub(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildFSub(param0, LHS, RHS, Name)
func BuildMul(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildMul(param0, LHS, RHS, Name)
func BuildNSWMul(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildNSWMul(param0, LHS, RHS, Name)
func BuildNUWMul(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildNUWMul(param0, LHS, RHS, Name)
func BuildFMul(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildFMul(param0, LHS, RHS, Name)
func BuildUDiv(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildUDiv(param0, LHS, RHS, Name)
func BuildExactUDiv(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildExactUDiv(param0, LHS, RHS, Name)
func BuildSDiv(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildSDiv(param0, LHS, RHS, Name)
func BuildExactSDiv(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildExactSDiv(param0, LHS, RHS, Name)
func BuildFDiv(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildFDiv(param0, LHS, RHS, Name)
func BuildURem(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildURem(param0, LHS, RHS, Name)
func BuildSRem(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildSRem(param0, LHS, RHS, Name)
func BuildFRem(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildFRem(param0, LHS, RHS, Name)
func BuildShl(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildShl(param0, LHS, RHS, Name)
func BuildLShr(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildLShr(param0, LHS, RHS, Name)
func BuildAShr(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildAShr(param0, LHS, RHS, Name)
func BuildAnd(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildAnd(param0, LHS, RHS, Name)
func BuildOr(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildOr(param0, LHS, RHS, Name)
func BuildXor(param0 *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildXor(param0, LHS, RHS, Name)
func BuildBinOp(B *void, Op Opcode, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildBinOp(B, Op, LHS, RHS, Name)
func BuildNeg(param0 *void, V *void, Name *void) ValueRef:
    return lib.LLVMBuildNeg(param0, V, Name)
func BuildNSWNeg(B *void, V *void, Name *void) ValueRef:
    return lib.LLVMBuildNSWNeg(B, V, Name)
func BuildNUWNeg(B *void, V *void, Name *void) ValueRef:
    return lib.LLVMBuildNUWNeg(B, V, Name)
func BuildFNeg(param0 *void, V *void, Name *void) ValueRef:
    return lib.LLVMBuildFNeg(param0, V, Name)
func BuildNot(param0 *void, V *void, Name *void) ValueRef:
    return lib.LLVMBuildNot(param0, V, Name)
func GetNUW(ArithInst *void) Bool:
    return lib.LLVMGetNUW(ArithInst)
func SetNUW(ArithInst *void, HasNUW Bool) void:
    return lib.LLVMSetNUW(ArithInst, HasNUW)
func GetNSW(ArithInst *void) Bool:
    return lib.LLVMGetNSW(ArithInst)
func SetNSW(ArithInst *void, HasNSW Bool) void:
    return lib.LLVMSetNSW(ArithInst, HasNSW)
func GetExact(DivOrShrInst *void) Bool:
    return lib.LLVMGetExact(DivOrShrInst)
func SetExact(DivOrShrInst *void, IsExact Bool) void:
    return lib.LLVMSetExact(DivOrShrInst, IsExact)
func BuildMalloc(param0 *void, Ty *void, Name *void) ValueRef:
    return lib.LLVMBuildMalloc(param0, Ty, Name)
func BuildArrayMalloc(param0 *void, Ty *void, Val *void, Name *void) ValueRef:
    return lib.LLVMBuildArrayMalloc(param0, Ty, Val, Name)
func BuildMemSet(B *void, Ptr *void, Val *void, Len *void, Align int) ValueRef:
    return lib.LLVMBuildMemSet(B, Ptr, Val, Len, Align)
func BuildMemCpy(B *void, Dst *void, DstAlign int, Src *void, SrcAlign int, Size *void) ValueRef:
    return lib.LLVMBuildMemCpy(B, Dst, DstAlign, Src, SrcAlign, Size)
func BuildMemMove(B *void, Dst *void, DstAlign int, Src *void, SrcAlign int, Size *void) ValueRef:
    return lib.LLVMBuildMemMove(B, Dst, DstAlign, Src, SrcAlign, Size)
func BuildAlloca(param0 *void, Ty *void, Name *void) ValueRef:
    return lib.LLVMBuildAlloca(param0, Ty, Name)
func BuildArrayAlloca(param0 *void, Ty *void, Val *void, Name *void) ValueRef:
    return lib.LLVMBuildArrayAlloca(param0, Ty, Val, Name)
func BuildFree(param0 *void, PointerVal *void) ValueRef:
    return lib.LLVMBuildFree(param0, PointerVal)
func BuildLoad2(param0 *void, Ty *void, PointerVal *void, Name *void) ValueRef:
    return lib.LLVMBuildLoad2(param0, Ty, PointerVal, Name)
func BuildStore(param0 *void, Val *void, Ptr *void) ValueRef:
    return lib.LLVMBuildStore(param0, Val, Ptr)
func BuildGEP2(B *void, Ty *void, Pointer *void, Indices *void, NumIndices int, Name *void) ValueRef:
    return lib.LLVMBuildGEP2(B, Ty, Pointer, Indices, NumIndices, Name)
func BuildInBoundsGEP2(B *void, Ty *void, Pointer *void, Indices *void, NumIndices int, Name *void) ValueRef:
    return lib.LLVMBuildInBoundsGEP2(B, Ty, Pointer, Indices, NumIndices, Name)
func BuildStructGEP2(B *void, Ty *void, Pointer *void, Idx int, Name *void) ValueRef:
    return lib.LLVMBuildStructGEP2(B, Ty, Pointer, Idx, Name)
func BuildGlobalString(B *void, Str *void, Name *void) ValueRef:
    return lib.LLVMBuildGlobalString(B, Str, Name)
func BuildGlobalStringPtr(B *void, Str *void, Name *void) ValueRef:
    return lib.LLVMBuildGlobalStringPtr(B, Str, Name)
func GetVolatile(MemoryAccessInst *void) Bool:
    return lib.LLVMGetVolatile(MemoryAccessInst)
func SetVolatile(MemoryAccessInst *void, IsVolatile Bool) void:
    return lib.LLVMSetVolatile(MemoryAccessInst, IsVolatile)
func GetWeak(CmpXchgInst *void) Bool:
    return lib.LLVMGetWeak(CmpXchgInst)
func SetWeak(CmpXchgInst *void, IsWeak Bool) void:
    return lib.LLVMSetWeak(CmpXchgInst, IsWeak)
func GetOrdering(MemoryAccessInst *void) AtomicOrdering:
    return lib.LLVMGetOrdering(MemoryAccessInst)
func SetOrdering(MemoryAccessInst *void, Ordering AtomicOrdering) void:
    return lib.LLVMSetOrdering(MemoryAccessInst, Ordering)
func GetAtomicRMWBinOp(AtomicRMWInst *void) AtomicRMWBinOp:
    return lib.LLVMGetAtomicRMWBinOp(AtomicRMWInst)
func SetAtomicRMWBinOp(AtomicRMWInst *void, BinOp AtomicRMWBinOp) void:
    return lib.LLVMSetAtomicRMWBinOp(AtomicRMWInst, BinOp)
func BuildTrunc(param0 *void, Val *void, DestTy *void, Name *void) ValueRef:
    return lib.LLVMBuildTrunc(param0, Val, DestTy, Name)
func BuildZExt(param0 *void, Val *void, DestTy *void, Name *void) ValueRef:
    return lib.LLVMBuildZExt(param0, Val, DestTy, Name)
func BuildSExt(param0 *void, Val *void, DestTy *void, Name *void) ValueRef:
    return lib.LLVMBuildSExt(param0, Val, DestTy, Name)
func BuildFPToUI(param0 *void, Val *void, DestTy *void, Name *void) ValueRef:
    return lib.LLVMBuildFPToUI(param0, Val, DestTy, Name)
func BuildFPToSI(param0 *void, Val *void, DestTy *void, Name *void) ValueRef:
    return lib.LLVMBuildFPToSI(param0, Val, DestTy, Name)
func BuildUIToFP(param0 *void, Val *void, DestTy *void, Name *void) ValueRef:
    return lib.LLVMBuildUIToFP(param0, Val, DestTy, Name)
func BuildSIToFP(param0 *void, Val *void, DestTy *void, Name *void) ValueRef:
    return lib.LLVMBuildSIToFP(param0, Val, DestTy, Name)
func BuildFPTrunc(param0 *void, Val *void, DestTy *void, Name *void) ValueRef:
    return lib.LLVMBuildFPTrunc(param0, Val, DestTy, Name)
func BuildFPExt(param0 *void, Val *void, DestTy *void, Name *void) ValueRef:
    return lib.LLVMBuildFPExt(param0, Val, DestTy, Name)
func BuildPtrToInt(param0 *void, Val *void, DestTy *void, Name *void) ValueRef:
    return lib.LLVMBuildPtrToInt(param0, Val, DestTy, Name)
func BuildIntToPtr(param0 *void, Val *void, DestTy *void, Name *void) ValueRef:
    return lib.LLVMBuildIntToPtr(param0, Val, DestTy, Name)
func BuildBitCast(param0 *void, Val *void, DestTy *void, Name *void) ValueRef:
    return lib.LLVMBuildBitCast(param0, Val, DestTy, Name)
func BuildAddrSpaceCast(param0 *void, Val *void, DestTy *void, Name *void) ValueRef:
    return lib.LLVMBuildAddrSpaceCast(param0, Val, DestTy, Name)
func BuildZExtOrBitCast(param0 *void, Val *void, DestTy *void, Name *void) ValueRef:
    return lib.LLVMBuildZExtOrBitCast(param0, Val, DestTy, Name)
func BuildSExtOrBitCast(param0 *void, Val *void, DestTy *void, Name *void) ValueRef:
    return lib.LLVMBuildSExtOrBitCast(param0, Val, DestTy, Name)
func BuildTruncOrBitCast(param0 *void, Val *void, DestTy *void, Name *void) ValueRef:
    return lib.LLVMBuildTruncOrBitCast(param0, Val, DestTy, Name)
func BuildCast(B *void, Op Opcode, Val *void, DestTy *void, Name *void) ValueRef:
    return lib.LLVMBuildCast(B, Op, Val, DestTy, Name)
func BuildPointerCast(param0 *void, Val *void, DestTy *void, Name *void) ValueRef:
    return lib.LLVMBuildPointerCast(param0, Val, DestTy, Name)
func BuildIntCast2(param0 *void, Val *void, DestTy *void, IsSigned Bool, Name *void) ValueRef:
    return lib.LLVMBuildIntCast2(param0, Val, DestTy, IsSigned, Name)
func BuildFPCast(param0 *void, Val *void, DestTy *void, Name *void) ValueRef:
    return lib.LLVMBuildFPCast(param0, Val, DestTy, Name)
func BuildIntCast(param0 *void, Val *void, DestTy *void, Name *void) ValueRef:
    return lib.LLVMBuildIntCast(param0, Val, DestTy, Name)
func GetCastOpcode(Src *void, SrcIsSigned Bool, DestTy *void, DestIsSigned Bool) Opcode:
    return lib.LLVMGetCastOpcode(Src, SrcIsSigned, DestTy, DestIsSigned)
func BuildICmp(param0 *void, Op IntPredicate, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildICmp(param0, Op, LHS, RHS, Name)
func BuildFCmp(param0 *void, Op RealPredicate, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildFCmp(param0, Op, LHS, RHS, Name)
func BuildPhi(param0 *void, Ty *void, Name *void) ValueRef:
    return lib.LLVMBuildPhi(param0, Ty, Name)
func BuildCall2(param0 *void, param1 *void, Fn *void, Args *void, NumArgs int, Name *void) ValueRef:
    return lib.LLVMBuildCall2(param0, param1, Fn, Args, NumArgs, Name)
func BuildSelect(param0 *void, If *void, Then *void, Else *void, Name *void) ValueRef:
    return lib.LLVMBuildSelect(param0, If, Then, Else, Name)
func BuildVAArg(param0 *void, List *void, Ty *void, Name *void) ValueRef:
    return lib.LLVMBuildVAArg(param0, List, Ty, Name)
func BuildExtractElement(param0 *void, VecVal *void, Index *void, Name *void) ValueRef:
    return lib.LLVMBuildExtractElement(param0, VecVal, Index, Name)
func BuildInsertElement(param0 *void, VecVal *void, EltVal *void, Index *void, Name *void) ValueRef:
    return lib.LLVMBuildInsertElement(param0, VecVal, EltVal, Index, Name)
func BuildShuffleVector(param0 *void, V1 *void, V2 *void, Mask *void, Name *void) ValueRef:
    return lib.LLVMBuildShuffleVector(param0, V1, V2, Mask, Name)
func BuildExtractValue(param0 *void, AggVal *void, Index int, Name *void) ValueRef:
    return lib.LLVMBuildExtractValue(param0, AggVal, Index, Name)
func BuildInsertValue(param0 *void, AggVal *void, EltVal *void, Index int, Name *void) ValueRef:
    return lib.LLVMBuildInsertValue(param0, AggVal, EltVal, Index, Name)
func BuildFreeze(param0 *void, Val *void, Name *void) ValueRef:
    return lib.LLVMBuildFreeze(param0, Val, Name)
func BuildIsNull(param0 *void, Val *void, Name *void) ValueRef:
    return lib.LLVMBuildIsNull(param0, Val, Name)
func BuildIsNotNull(param0 *void, Val *void, Name *void) ValueRef:
    return lib.LLVMBuildIsNotNull(param0, Val, Name)
func BuildPtrDiff2(param0 *void, ElemTy *void, LHS *void, RHS *void, Name *void) ValueRef:
    return lib.LLVMBuildPtrDiff2(param0, ElemTy, LHS, RHS, Name)
func BuildFence(B *void, ordering AtomicOrdering, singleThread Bool, Name *void) ValueRef:
    return lib.LLVMBuildFence(B, ordering, singleThread, Name)
func BuildAtomicRMW(B *void, op AtomicRMWBinOp, PTR *void, Val *void, ordering AtomicOrdering, singleThread Bool) ValueRef:
    return lib.LLVMBuildAtomicRMW(B, op, PTR, Val, ordering, singleThread)
func BuildAtomicCmpXchg(B *void, Ptr *void, Cmp *void, New *void, SuccessOrdering AtomicOrdering, FailureOrdering AtomicOrdering, SingleThread Bool) ValueRef:
    return lib.LLVMBuildAtomicCmpXchg(B, Ptr, Cmp, New, SuccessOrdering, FailureOrdering, SingleThread)
func GetNumMaskElements(ShuffleVectorInst *void) int:
    return lib.LLVMGetNumMaskElements(ShuffleVectorInst)
func GetUndefMaskElem() int:
    return lib.LLVMGetUndefMaskElem()
func GetMaskValue(ShuffleVectorInst *void, Elt int) int:
    return lib.LLVMGetMaskValue(ShuffleVectorInst, Elt)
func IsAtomicSingleThread(AtomicInst *void) Bool:
    return lib.LLVMIsAtomicSingleThread(AtomicInst)
func SetAtomicSingleThread(AtomicInst *void, SingleThread Bool) void:
    return lib.LLVMSetAtomicSingleThread(AtomicInst, SingleThread)
func GetCmpXchgSuccessOrdering(CmpXchgInst *void) AtomicOrdering:
    return lib.LLVMGetCmpXchgSuccessOrdering(CmpXchgInst)
func SetCmpXchgSuccessOrdering(CmpXchgInst *void, Ordering AtomicOrdering) void:
    return lib.LLVMSetCmpXchgSuccessOrdering(CmpXchgInst, Ordering)
func GetCmpXchgFailureOrdering(CmpXchgInst *void) AtomicOrdering:
    return lib.LLVMGetCmpXchgFailureOrdering(CmpXchgInst)
func SetCmpXchgFailureOrdering(CmpXchgInst *void, Ordering AtomicOrdering) void:
    return lib.LLVMSetCmpXchgFailureOrdering(CmpXchgInst, Ordering)
func CreateModuleProviderForExistingModule(M *void) ModuleProviderRef:
    return lib.LLVMCreateModuleProviderForExistingModule(M)
func DisposeModuleProvider(M *void) void:
    return lib.LLVMDisposeModuleProvider(M)
func CreateMemoryBufferWithContentsOfFile(Path *void, OutMemBuf *void, OutMessage *void) Bool:
    return lib.LLVMCreateMemoryBufferWithContentsOfFile(Path, OutMemBuf, OutMessage)
func CreateMemoryBufferWithSTDIN(OutMemBuf *void, OutMessage *void) Bool:
    return lib.LLVMCreateMemoryBufferWithSTDIN(OutMemBuf, OutMessage)
func CreateMemoryBufferWithMemoryRange(InputData *void, InputDataLength int, BufferName *void, RequiresNullTerminator Bool) MemoryBufferRef:
    return lib.LLVMCreateMemoryBufferWithMemoryRange(InputData, InputDataLength, BufferName, RequiresNullTerminator)
func CreateMemoryBufferWithMemoryRangeCopy(InputData *void, InputDataLength int, BufferName *void) MemoryBufferRef:
    return lib.LLVMCreateMemoryBufferWithMemoryRangeCopy(InputData, InputDataLength, BufferName)
func GetBufferStart(MemBuf *void) *void:
    return lib.LLVMGetBufferStart(MemBuf)
func GetBufferSize(MemBuf *void) int:
    return lib.LLVMGetBufferSize(MemBuf)
func DisposeMemoryBuffer(MemBuf *void) void:
    return lib.LLVMDisposeMemoryBuffer(MemBuf)
func CreatePassManager() PassManagerRef:
    return lib.LLVMCreatePassManager()
func CreateFunctionPassManagerForModule(M *void) PassManagerRef:
    return lib.LLVMCreateFunctionPassManagerForModule(M)
func CreateFunctionPassManager(MP *void) PassManagerRef:
    return lib.LLVMCreateFunctionPassManager(MP)
func RunPassManager(PM *void, M *void) Bool:
    return lib.LLVMRunPassManager(PM, M)
func InitializeFunctionPassManager(FPM *void) Bool:
    return lib.LLVMInitializeFunctionPassManager(FPM)
func RunFunctionPassManager(FPM *void, F *void) Bool:
    return lib.LLVMRunFunctionPassManager(FPM, F)
func FinalizeFunctionPassManager(FPM *void) Bool:
    return lib.LLVMFinalizeFunctionPassManager(FPM)
func DisposePassManager(PM *void) void:
    return lib.LLVMDisposePassManager(PM)
func StartMultithreaded() Bool:
    return lib.LLVMStartMultithreaded()
func StopMultithreaded() void:
    return lib.LLVMStopMultithreaded()
func IsMultithreaded() Bool:
    return lib.LLVMIsMultithreaded()
type OpaqueSectionIterator_S #int64_t
type SectionIteratorRef -> *void

type OpaqueSymbolIterator_S #int64_t
type SymbolIteratorRef -> *void

type OpaqueRelocationIterator_S #int64_t
type RelocationIteratorRef -> *void

type BinaryType -> int
var .BinaryTypeArchive int = 0
var .BinaryTypeMachOUniversalBinary int = 1
var .BinaryTypeCOFFImportFile int = 2
var .BinaryTypeIR int = 3
var .BinaryTypeWinRes int = 4
var .BinaryTypeCOFF int = 5
var .BinaryTypeELF32L int = 6
var .BinaryTypeELF32B int = 7
var .BinaryTypeELF64L int = 8
var .BinaryTypeELF64B int = 9
var .BinaryTypeMachO32L int = 10
var .BinaryTypeMachO32B int = 11
var .BinaryTypeMachO64L int = 12
var .BinaryTypeMachO64B int = 13
var .BinaryTypeWasm int = 14
var .BinaryTypeOffload int = 15

func CreateBinary(MemBuf *void, Context *void, ErrorMessage *void) BinaryRef:
    return lib.LLVMCreateBinary(MemBuf, Context, ErrorMessage)
func DisposeBinary(BR *void) void:
    return lib.LLVMDisposeBinary(BR)
func BinaryCopyMemoryBuffer(BR *void) MemoryBufferRef:
    return lib.LLVMBinaryCopyMemoryBuffer(BR)
func BinaryGetType(BR *void) BinaryType:
    return lib.LLVMBinaryGetType(BR)
func MachOUniversalBinaryCopyObjectForArch(BR *void, Arch *void, ArchLen int, ErrorMessage *void) BinaryRef:
    return lib.LLVMMachOUniversalBinaryCopyObjectForArch(BR, Arch, ArchLen, ErrorMessage)
func ObjectFileCopySectionIterator(BR *void) SectionIteratorRef:
    return lib.LLVMObjectFileCopySectionIterator(BR)
func ObjectFileIsSectionIteratorAtEnd(BR *void, SI *void) Bool:
    return lib.LLVMObjectFileIsSectionIteratorAtEnd(BR, SI)
func ObjectFileCopySymbolIterator(BR *void) SymbolIteratorRef:
    return lib.LLVMObjectFileCopySymbolIterator(BR)
func ObjectFileIsSymbolIteratorAtEnd(BR *void, SI *void) Bool:
    return lib.LLVMObjectFileIsSymbolIteratorAtEnd(BR, SI)
func DisposeSectionIterator(SI *void) void:
    return lib.LLVMDisposeSectionIterator(SI)
func MoveToNextSection(SI *void) void:
    return lib.LLVMMoveToNextSection(SI)
func MoveToContainingSection(Sect *void, Sym *void) void:
    return lib.LLVMMoveToContainingSection(Sect, Sym)
func DisposeSymbolIterator(SI *void) void:
    return lib.LLVMDisposeSymbolIterator(SI)
func MoveToNextSymbol(SI *void) void:
    return lib.LLVMMoveToNextSymbol(SI)
func GetSectionName(SI *void) *void:
    return lib.LLVMGetSectionName(SI)
func GetSectionSize(SI *void) int:
    return lib.LLVMGetSectionSize(SI)
func GetSectionContents(SI *void) *void:
    return lib.LLVMGetSectionContents(SI)
func GetSectionAddress(SI *void) int:
    return lib.LLVMGetSectionAddress(SI)
func GetSectionContainsSymbol(SI *void, Sym *void) Bool:
    return lib.LLVMGetSectionContainsSymbol(SI, Sym)
func GetRelocations(Section *void) RelocationIteratorRef:
    return lib.LLVMGetRelocations(Section)
func DisposeRelocationIterator(RI *void) void:
    return lib.LLVMDisposeRelocationIterator(RI)
func IsRelocationIteratorAtEnd(Section *void, RI *void) Bool:
    return lib.LLVMIsRelocationIteratorAtEnd(Section, RI)
func MoveToNextRelocation(RI *void) void:
    return lib.LLVMMoveToNextRelocation(RI)
func GetSymbolName(SI *void) *void:
    return lib.LLVMGetSymbolName(SI)
func GetSymbolAddress(SI *void) int:
    return lib.LLVMGetSymbolAddress(SI)
func GetSymbolSize(SI *void) int:
    return lib.LLVMGetSymbolSize(SI)
func GetRelocationOffset(RI *void) int:
    return lib.LLVMGetRelocationOffset(RI)
func GetRelocationSymbol(RI *void) SymbolIteratorRef:
    return lib.LLVMGetRelocationSymbol(RI)
func GetRelocationType(RI *void) int:
    return lib.LLVMGetRelocationType(RI)
func GetRelocationTypeName(RI *void) *void:
    return lib.LLVMGetRelocationTypeName(RI)
func GetRelocationValueString(RI *void) *void:
    return lib.LLVMGetRelocationValueString(RI)
type OpaqueObjectFile_S #int64_t
type ObjectFileRef -> *void

func CreateObjectFile(MemBuf *void) ObjectFileRef:
    return lib.LLVMCreateObjectFile(MemBuf)
func DisposeObjectFile(ObjectFile *void) void:
    return lib.LLVMDisposeObjectFile(ObjectFile)
func GetSections(ObjectFile *void) SectionIteratorRef:
    return lib.LLVMGetSections(ObjectFile)
func IsSectionIteratorAtEnd(ObjectFile *void, SI *void) Bool:
    return lib.LLVMIsSectionIteratorAtEnd(ObjectFile, SI)
func GetSymbols(ObjectFile *void) SymbolIteratorRef:
    return lib.LLVMGetSymbols(ObjectFile)
func IsSymbolIteratorAtEnd(ObjectFile *void, SI *void) Bool:
    return lib.LLVMIsSymbolIteratorAtEnd(ObjectFile, SI)

use os
let .ffi = false
let .lib = load()
func load() dyn:
    ffi = os.newFFI()
    ffi.cbind(OpaqueMemoryBuffer_S, {_})
    ffi.cbind(OpaqueContext_S, {_})
    ffi.cbind(OpaqueModule_S, {_})
    ffi.cbind(OpaqueType_S, {_})
    ffi.cbind(OpaqueValue_S, {_})
    ffi.cbind(OpaqueBasicBlock_S, {_})
    ffi.cbind(OpaqueMetadata_S, {_})
    ffi.cbind(OpaqueNamedMDNode_S, {_})
    ffi.cbind(OpaqueValueMetadataEntry_S, {_})
    ffi.cbind(OpaqueBuilder_S, {_})
    ffi.cbind(OpaqueDIBuilder_S, {_})
    ffi.cbind(OpaqueModuleProvider_S, {_})
    ffi.cbind(OpaquePassManager_S, {_})
    ffi.cbind(OpaqueUse_S, {_})
    ffi.cbind(OpaqueAttributeRef_S, {_})
    ffi.cbind(OpaqueDiagnosticInfo_S, {_})
    ffi.cbind(Comdat_S, {_})
    ffi.cbind(OpaqueModuleFlagEntry_S, {_})
    ffi.cbind(OpaqueJITEventListener_S, {_})
    ffi.cbind(OpaqueBinary_S, {_})
    ffi.cbind(OpaqueSectionIterator_S, {_})
    ffi.cbind(OpaqueSymbolIterator_S, {_})
    ffi.cbind(OpaqueRelocationIterator_S, {_})
    ffi.cbind(OpaqueObjectFile_S, {_})
    ffi.cfunc('LLVMInstallFatalErrorHandler', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMResetFatalErrorHandler', {_}, symbol.void)
    ffi.cfunc('LLVMEnablePrettyStackTrace', {_}, symbol.void)
    ffi.cfunc('LLVMShutdown', {_}, symbol.void)
    ffi.cfunc('LLVMGetVersion', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMCreateMessage', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMDisposeMessage', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMContextCreate', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMGetGlobalContext', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMContextSetDiagnosticHandler', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMContextGetDiagnosticHandler', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMContextGetDiagnosticContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMContextSetYieldCallback', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMContextShouldDiscardValueNames', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMContextSetDiscardValueNames', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMContextDispose', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetDiagInfoDescription', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetDiagInfoSeverity', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMGetMDKindIDInContext', {symbol.voidPtr, symbol.voidPtr, symbol.uint}, symbol.uint)
    ffi.cfunc('LLVMGetMDKindID', {symbol.voidPtr, symbol.uint}, symbol.uint)
    ffi.cfunc('LLVMGetEnumAttributeKindForName', {symbol.voidPtr, symbol.long}, symbol.uint)
    ffi.cfunc('LLVMGetLastEnumAttributeKind', {_}, symbol.uint)
    ffi.cfunc('LLVMCreateEnumAttribute', {symbol.voidPtr, symbol.uint, symbol.ulong}, symbol.voidPtr)
    ffi.cfunc('LLVMGetEnumAttributeKind', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMGetEnumAttributeValue', {symbol.voidPtr}, symbol.ulong)
    ffi.cfunc('LLVMCreateTypeAttribute', {symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetTypeAttributeValue', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMCreateStringAttribute', {symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMGetStringAttributeKind', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetStringAttributeValue', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsEnumAttribute', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMIsStringAttribute', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMIsTypeAttribute', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMGetTypeByName2', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMModuleCreateWithName', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMModuleCreateWithNameInContext', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMCloneModule', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMDisposeModule', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetModuleIdentifier', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMSetModuleIdentifier', {symbol.voidPtr, symbol.voidPtr, symbol.long}, symbol.void)
    ffi.cfunc('LLVMGetSourceFileName', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMSetSourceFileName', {symbol.voidPtr, symbol.voidPtr, symbol.long}, symbol.void)
    ffi.cfunc('LLVMGetDataLayoutStr', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetDataLayout', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMSetDataLayout', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetTarget', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMSetTarget', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMCopyModuleFlagsMetadata', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMDisposeModuleFlagsMetadata', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMModuleFlagEntriesGetFlagBehavior', {symbol.voidPtr, symbol.uint}, symbol.int)
    ffi.cfunc('LLVMModuleFlagEntriesGetKey', {symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMModuleFlagEntriesGetMetadata', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMGetModuleFlag', {symbol.voidPtr, symbol.voidPtr, symbol.long}, symbol.voidPtr)
    ffi.cfunc('LLVMAddModuleFlag', {symbol.voidPtr, symbol.int, symbol.voidPtr, symbol.long, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMDumpModule', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMPrintModuleToFile', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMPrintModuleToString', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetModuleInlineAsm', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMSetModuleInlineAsm2', {symbol.voidPtr, symbol.voidPtr, symbol.long}, symbol.void)
    ffi.cfunc('LLVMAppendModuleInlineAsm', {symbol.voidPtr, symbol.voidPtr, symbol.long}, symbol.void)
    ffi.cfunc('LLVMGetInlineAsm', {symbol.voidPtr, symbol.voidPtr, symbol.long, symbol.voidPtr, symbol.long, symbol.int, symbol.int, symbol.int, symbol.int}, symbol.voidPtr)
    ffi.cfunc('LLVMGetModuleContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetTypeByName', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetFirstNamedMetadata', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetLastNamedMetadata', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetNextNamedMetadata', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetPreviousNamedMetadata', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetNamedMetadata', {symbol.voidPtr, symbol.voidPtr, symbol.long}, symbol.voidPtr)
    ffi.cfunc('LLVMGetOrInsertNamedMetadata', {symbol.voidPtr, symbol.voidPtr, symbol.long}, symbol.voidPtr)
    ffi.cfunc('LLVMGetNamedMetadataName', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetNamedMetadataNumOperands', {symbol.voidPtr, symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMGetNamedMetadataOperands', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMAddNamedMetadataOperand', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetDebugLocDirectory', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetDebugLocFilename', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetDebugLocLine', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMGetDebugLocColumn', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMAddFunction', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetNamedFunction', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetFirstFunction', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetLastFunction', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetNextFunction', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetPreviousFunction', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMSetModuleInlineAsm', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetTypeKind', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMTypeIsSized', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMGetTypeContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMDumpType', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMPrintTypeToString', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMInt1TypeInContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMInt8TypeInContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMInt16TypeInContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMInt32TypeInContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMInt64TypeInContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMInt128TypeInContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIntTypeInContext', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMInt1Type', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMInt8Type', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMInt16Type', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMInt32Type', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMInt64Type', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMInt128Type', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMIntType', {symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMGetIntTypeWidth', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMHalfTypeInContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBFloatTypeInContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMFloatTypeInContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMDoubleTypeInContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMX86FP80TypeInContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMFP128TypeInContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMPPCFP128TypeInContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMHalfType', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMBFloatType', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMFloatType', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMDoubleType', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMX86FP80Type', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMFP128Type', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMPPCFP128Type', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMFunctionType', {symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.int}, symbol.voidPtr)
    ffi.cfunc('LLVMIsFunctionVarArg', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMGetReturnType', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMCountParamTypes', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMGetParamTypes', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMStructTypeInContext', {symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.int}, symbol.voidPtr)
    ffi.cfunc('LLVMStructType', {symbol.voidPtr, symbol.uint, symbol.int}, symbol.voidPtr)
    ffi.cfunc('LLVMStructCreateNamed', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetStructName', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMStructSetBody', {symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.int}, symbol.void)
    ffi.cfunc('LLVMCountStructElementTypes', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMGetStructElementTypes', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMStructGetTypeAtIndex', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMIsPackedStruct', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMIsOpaqueStruct', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMIsLiteralStruct', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMGetElementType', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetSubtypes', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetNumContainedTypes', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMArrayType', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMArrayType2', {symbol.voidPtr, symbol.ulong}, symbol.voidPtr)
    ffi.cfunc('LLVMGetArrayLength', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMGetArrayLength2', {symbol.voidPtr}, symbol.ulong)
    ffi.cfunc('LLVMPointerType', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMPointerTypeIsOpaque', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMPointerTypeInContext', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMGetPointerAddressSpace', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMVectorType', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMScalableVectorType', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMGetVectorSize', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMVoidTypeInContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMLabelTypeInContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMX86MMXTypeInContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMX86AMXTypeInContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMTokenTypeInContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMMetadataTypeInContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMVoidType', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMLabelType', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMX86MMXType', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMX86AMXType', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMTargetExtTypeInContext', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMTypeOf', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetValueKind', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMGetValueName2', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMSetValueName2', {symbol.voidPtr, symbol.voidPtr, symbol.long}, symbol.void)
    ffi.cfunc('LLVMDumpValue', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMPrintValueToString', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMReplaceAllUsesWith', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMIsConstant', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMIsUndef', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMIsPoison', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMIsAArgument', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsABasicBlock', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAInlineAsm', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAUser', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAConstant', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsABlockAddress', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAConstantAggregateZero', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAConstantArray', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAConstantDataSequential', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAConstantDataArray', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAConstantDataVector', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAConstantExpr', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAConstantFP', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAConstantInt', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAConstantPointerNull', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAConstantStruct', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAConstantTokenNone', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAConstantVector', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAGlobalValue', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAGlobalAlias', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAGlobalObject', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAFunction', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAGlobalVariable', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAGlobalIFunc', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAUndefValue', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAPoisonValue', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAInstruction', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAUnaryOperator', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsABinaryOperator', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsACallInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAIntrinsicInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsADbgInfoIntrinsic', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsADbgVariableIntrinsic', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsADbgDeclareInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsADbgLabelInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAMemIntrinsic', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAMemCpyInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAMemMoveInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAMemSetInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsACmpInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAFCmpInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAICmpInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAExtractElementInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAGetElementPtrInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAInsertElementInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAInsertValueInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsALandingPadInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAPHINode', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsASelectInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAShuffleVectorInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAStoreInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsABranchInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAIndirectBrInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAInvokeInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAReturnInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsASwitchInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAUnreachableInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAResumeInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsACleanupReturnInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsACatchReturnInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsACatchSwitchInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsACallBrInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAFuncletPadInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsACatchPadInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsACleanupPadInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAUnaryInstruction', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAAllocaInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsACastInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAAddrSpaceCastInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsABitCastInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAFPExtInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAFPToSIInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAFPToUIInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAFPTruncInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAIntToPtrInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAPtrToIntInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsASExtInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsASIToFPInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsATruncInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAUIToFPInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAZExtInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAExtractValueInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsALoadInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAVAArgInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAFreezeInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAAtomicCmpXchgInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAAtomicRMWInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAFenceInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAMDNode', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAValueAsMetadata', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsAMDString', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetValueName', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMSetValueName', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetFirstUse', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetNextUse', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetUser', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetUsedValue', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetOperand', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMGetOperandUse', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMSetOperand', {symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetNumOperands', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMConstNull', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstAllOnes', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetUndef', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetPoison', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsNull', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMConstPointerNull', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstInt', {symbol.voidPtr, symbol.ulong, symbol.int}, symbol.voidPtr)
    ffi.cfunc('LLVMConstIntOfArbitraryPrecision', {symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstIntOfString', {symbol.voidPtr, symbol.voidPtr, symbol.uchar}, symbol.voidPtr)
    ffi.cfunc('LLVMConstIntOfStringAndSize', {symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.uchar}, symbol.voidPtr)
    ffi.cfunc('LLVMConstReal', {symbol.voidPtr, symbol.double}, symbol.voidPtr)
    ffi.cfunc('LLVMConstRealOfString', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstRealOfStringAndSize', {symbol.voidPtr, symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMConstIntGetZExtValue', {symbol.voidPtr}, symbol.ulong)
    ffi.cfunc('LLVMConstIntGetSExtValue', {symbol.voidPtr}, symbol.long)
    ffi.cfunc('LLVMConstRealGetDouble', {symbol.voidPtr, symbol.voidPtr}, symbol.double)
    ffi.cfunc('LLVMConstStringInContext', {symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.int}, symbol.voidPtr)
    ffi.cfunc('LLVMConstString', {symbol.voidPtr, symbol.uint, symbol.int}, symbol.voidPtr)
    ffi.cfunc('LLVMIsConstantString', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMGetAsString', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstStructInContext', {symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.int}, symbol.voidPtr)
    ffi.cfunc('LLVMConstStruct', {symbol.voidPtr, symbol.uint, symbol.int}, symbol.voidPtr)
    ffi.cfunc('LLVMConstArray', {symbol.voidPtr, symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMConstArray2', {symbol.voidPtr, symbol.voidPtr, symbol.ulong}, symbol.voidPtr)
    ffi.cfunc('LLVMConstNamedStruct', {symbol.voidPtr, symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMGetAggregateElement', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMGetElementAsConstant', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMConstVector', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMGetConstOpcode', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMAlignOf', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMSizeOf', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstNeg', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstNSWNeg', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstNUWNeg', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstNot', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstAdd', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstNSWAdd', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstNUWAdd', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstSub', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstNSWSub', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstNUWSub', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstMul', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstNSWMul', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstNUWMul', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstAnd', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstOr', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstXor', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstICmp', {symbol.int, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstFCmp', {symbol.int, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstShl', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstLShr', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstAShr', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstGEP2', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMConstInBoundsGEP2', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMConstTrunc', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstSExt', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstZExt', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstFPTrunc', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstFPExt', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstUIToFP', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstSIToFP', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstFPToUI', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstFPToSI', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstPtrToInt', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstIntToPtr', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstBitCast', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstAddrSpaceCast', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstZExtOrBitCast', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstSExtOrBitCast', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstTruncOrBitCast', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstPointerCast', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstIntCast', {symbol.voidPtr, symbol.voidPtr, symbol.int}, symbol.voidPtr)
    ffi.cfunc('LLVMConstFPCast', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstExtractElement', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstInsertElement', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstShuffleVector', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBlockAddress', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMConstInlineAsm', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.int, symbol.int}, symbol.voidPtr)
    ffi.cfunc('LLVMGetGlobalParent', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsDeclaration', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMGetLinkage', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetLinkage', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMGetSection', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMSetSection', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetVisibility', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetVisibility', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMGetDLLStorageClass', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetDLLStorageClass', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMGetUnnamedAddress', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetUnnamedAddress', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMGlobalGetValueType', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMHasUnnamedAddr', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetUnnamedAddr', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMGetAlignment', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMSetAlignment', {symbol.voidPtr, symbol.uint}, symbol.void)
    ffi.cfunc('LLVMGlobalSetMetadata', {symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGlobalEraseMetadata', {symbol.voidPtr, symbol.uint}, symbol.void)
    ffi.cfunc('LLVMGlobalClearMetadata', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGlobalCopyAllMetadata', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMDisposeValueMetadataEntries', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMValueMetadataEntriesGetKind', {symbol.voidPtr, symbol.uint}, symbol.uint)
    ffi.cfunc('LLVMValueMetadataEntriesGetMetadata', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMAddGlobal', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMAddGlobalInAddressSpace', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMGetNamedGlobal', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetFirstGlobal', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetLastGlobal', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetNextGlobal', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetPreviousGlobal', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMDeleteGlobal', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetInitializer', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMSetInitializer', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMIsThreadLocal', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetThreadLocal', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMIsGlobalConstant', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetGlobalConstant', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMGetThreadLocalMode', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetThreadLocalMode', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMIsExternallyInitialized', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetExternallyInitialized', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMAddAlias2', {symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetNamedGlobalAlias', {symbol.voidPtr, symbol.voidPtr, symbol.long}, symbol.voidPtr)
    ffi.cfunc('LLVMGetFirstGlobalAlias', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetLastGlobalAlias', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetNextGlobalAlias', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetPreviousGlobalAlias', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMAliasGetAliasee', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMAliasSetAliasee', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMDeleteFunction', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMHasPersonalityFn', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMGetPersonalityFn', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMSetPersonalityFn', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMLookupIntrinsicID', {symbol.voidPtr, symbol.long}, symbol.uint)
    ffi.cfunc('LLVMGetIntrinsicID', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMGetIntrinsicDeclaration', {symbol.voidPtr, symbol.uint, symbol.voidPtr, symbol.long}, symbol.voidPtr)
    ffi.cfunc('LLVMIntrinsicGetType', {symbol.voidPtr, symbol.uint, symbol.voidPtr, symbol.long}, symbol.voidPtr)
    ffi.cfunc('LLVMIntrinsicGetName', {symbol.uint, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIntrinsicCopyOverloadedName', {symbol.uint, symbol.voidPtr, symbol.long, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIntrinsicCopyOverloadedName2', {symbol.voidPtr, symbol.uint, symbol.voidPtr, symbol.long, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIntrinsicIsOverloaded', {symbol.uint}, symbol.int)
    ffi.cfunc('LLVMGetFunctionCallConv', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMSetFunctionCallConv', {symbol.voidPtr, symbol.uint}, symbol.void)
    ffi.cfunc('LLVMGetGC', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMSetGC', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMAddAttributeAtIndex', {symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetAttributeCountAtIndex', {symbol.voidPtr, symbol.uint}, symbol.uint)
    ffi.cfunc('LLVMGetAttributesAtIndex', {symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetEnumAttributeAtIndex', {symbol.voidPtr, symbol.uint, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMGetStringAttributeAtIndex', {symbol.voidPtr, symbol.uint, symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMRemoveEnumAttributeAtIndex', {symbol.voidPtr, symbol.uint, symbol.uint}, symbol.void)
    ffi.cfunc('LLVMRemoveStringAttributeAtIndex', {symbol.voidPtr, symbol.uint, symbol.voidPtr, symbol.uint}, symbol.void)
    ffi.cfunc('LLVMAddTargetDependentFunctionAttr', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMCountParams', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMGetParams', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetParam', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMGetParamParent', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetFirstParam', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetLastParam', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetNextParam', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetPreviousParam', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMSetParamAlignment', {symbol.voidPtr, symbol.uint}, symbol.void)
    ffi.cfunc('LLVMAddGlobalIFunc', {symbol.voidPtr, symbol.voidPtr, symbol.long, symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetNamedGlobalIFunc', {symbol.voidPtr, symbol.voidPtr, symbol.long}, symbol.voidPtr)
    ffi.cfunc('LLVMGetFirstGlobalIFunc', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetLastGlobalIFunc', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetNextGlobalIFunc', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetPreviousGlobalIFunc', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetGlobalIFuncResolver', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMSetGlobalIFuncResolver', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMEraseGlobalIFunc', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMRemoveGlobalIFunc', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMMDStringInContext2', {symbol.voidPtr, symbol.voidPtr, symbol.long}, symbol.voidPtr)
    ffi.cfunc('LLVMMDNodeInContext2', {symbol.voidPtr, symbol.voidPtr, symbol.long}, symbol.voidPtr)
    ffi.cfunc('LLVMMetadataAsValue', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMValueAsMetadata', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetMDString', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetMDNodeNumOperands', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMGetMDNodeOperands', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMReplaceMDNodeOperandWith', {symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMMDStringInContext', {symbol.voidPtr, symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMMDString', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMMDNodeInContext', {symbol.voidPtr, symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMMDNode', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMBasicBlockAsValue', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMValueIsBasicBlock', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMValueAsBasicBlock', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetBasicBlockName', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetBasicBlockParent', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetBasicBlockTerminator', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMCountBasicBlocks', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMGetBasicBlocks', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetFirstBasicBlock', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetLastBasicBlock', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetNextBasicBlock', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetPreviousBasicBlock', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetEntryBasicBlock', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMInsertExistingBasicBlockAfterInsertBlock', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMAppendExistingBasicBlock', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMCreateBasicBlockInContext', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMAppendBasicBlockInContext', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMAppendBasicBlock', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMInsertBasicBlockInContext', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMInsertBasicBlock', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMDeleteBasicBlock', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMRemoveBasicBlockFromParent', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMMoveBasicBlockBefore', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMMoveBasicBlockAfter', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetFirstInstruction', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetLastInstruction', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMHasMetadata', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMGetMetadata', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMSetMetadata', {symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMInstructionGetAllMetadataOtherThanDebugLoc', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetInstructionParent', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetNextInstruction', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetPreviousInstruction', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMInstructionRemoveFromParent', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMInstructionEraseFromParent', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMDeleteInstruction', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetInstructionOpcode', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMGetICmpPredicate', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMGetFCmpPredicate', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMInstructionClone', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsATerminatorInst', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetNumArgOperands', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMSetInstructionCallConv', {symbol.voidPtr, symbol.uint}, symbol.void)
    ffi.cfunc('LLVMGetInstructionCallConv', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMSetInstrParamAlignment', {symbol.voidPtr, symbol.uint, symbol.uint}, symbol.void)
    ffi.cfunc('LLVMAddCallSiteAttribute', {symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetCallSiteAttributeCount', {symbol.voidPtr, symbol.uint}, symbol.uint)
    ffi.cfunc('LLVMGetCallSiteAttributes', {symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetCallSiteEnumAttribute', {symbol.voidPtr, symbol.uint, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMGetCallSiteStringAttribute', {symbol.voidPtr, symbol.uint, symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMRemoveCallSiteEnumAttribute', {symbol.voidPtr, symbol.uint, symbol.uint}, symbol.void)
    ffi.cfunc('LLVMRemoveCallSiteStringAttribute', {symbol.voidPtr, symbol.uint, symbol.voidPtr, symbol.uint}, symbol.void)
    ffi.cfunc('LLVMGetCalledFunctionType', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetCalledValue', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsTailCall', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetTailCall', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMGetNormalDest', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetUnwindDest', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMSetNormalDest', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMSetUnwindDest', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetNumSuccessors', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMGetSuccessor', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMSetSuccessor', {symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMIsConditional', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMGetCondition', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMSetCondition', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetSwitchDefaultDest', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetAllocatedType', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsInBounds', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetIsInBounds', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMGetGEPSourceElementType', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMAddIncoming', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.uint}, symbol.void)
    ffi.cfunc('LLVMCountIncoming', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMGetIncomingValue', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMGetIncomingBlock', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMGetNumIndices', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMGetIndices', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMCreateBuilderInContext', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMCreateBuilder', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMPositionBuilder', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMPositionBuilderBefore', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMPositionBuilderAtEnd', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetInsertBlock', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMClearInsertionPosition', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMInsertIntoBuilder', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMInsertIntoBuilderWithName', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMDisposeBuilder', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetCurrentDebugLocation2', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMSetCurrentDebugLocation2', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMSetInstDebugLocation', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMAddMetadataToInst', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMBuilderGetDefaultFPMathTag', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuilderSetDefaultFPMathTag', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMSetCurrentDebugLocation', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetCurrentDebugLocation', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildRetVoid', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildRet', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildAggregateRet', {symbol.voidPtr, symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildBr', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildCondBr', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildSwitch', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildIndirectBr', {symbol.voidPtr, symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildInvoke2', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildUnreachable', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildResume', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildLandingPad', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildCleanupRet', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildCatchRet', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildCatchPad', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildCleanupPad', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildCatchSwitch', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMAddCase', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMAddDestination', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetNumClauses', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMGetClause', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMAddClause', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMIsCleanup', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetCleanup', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMAddHandler', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetNumHandlers', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMGetHandlers', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetArgOperand', {symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMSetArgOperand', {symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetParentCatchSwitch', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMSetParentCatchSwitch', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMBuildAdd', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildNSWAdd', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildNUWAdd', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildFAdd', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildSub', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildNSWSub', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildNUWSub', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildFSub', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildMul', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildNSWMul', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildNUWMul', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildFMul', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildUDiv', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildExactUDiv', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildSDiv', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildExactSDiv', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildFDiv', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildURem', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildSRem', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildFRem', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildShl', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildLShr', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildAShr', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildAnd', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildOr', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildXor', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildBinOp', {symbol.voidPtr, symbol.int, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildNeg', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildNSWNeg', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildNUWNeg', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildFNeg', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildNot', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetNUW', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetNUW', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMGetNSW', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetNSW', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMGetExact', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetExact', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMBuildMalloc', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildArrayMalloc', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildMemSet', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.uint}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildMemCpy', {symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildMemMove', {symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildAlloca', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildArrayAlloca', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildFree', {symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildLoad2', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildStore', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildGEP2', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildInBoundsGEP2', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildStructGEP2', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildGlobalString', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildGlobalStringPtr', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetVolatile', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetVolatile', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMGetWeak', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetWeak', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMGetOrdering', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetOrdering', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMGetAtomicRMWBinOp', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetAtomicRMWBinOp', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMBuildTrunc', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildZExt', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildSExt', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildFPToUI', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildFPToSI', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildUIToFP', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildSIToFP', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildFPTrunc', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildFPExt', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildPtrToInt', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildIntToPtr', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildBitCast', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildAddrSpaceCast', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildZExtOrBitCast', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildSExtOrBitCast', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildTruncOrBitCast', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildCast', {symbol.voidPtr, symbol.int, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildPointerCast', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildIntCast2', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.int, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildFPCast', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildIntCast', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetCastOpcode', {symbol.voidPtr, symbol.int, symbol.voidPtr, symbol.int}, symbol.int)
    ffi.cfunc('LLVMBuildICmp', {symbol.voidPtr, symbol.int, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildFCmp', {symbol.voidPtr, symbol.int, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildPhi', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildCall2', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildSelect', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildVAArg', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildExtractElement', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildInsertElement', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildShuffleVector', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildExtractValue', {symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildInsertValue', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.uint, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildFreeze', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildIsNull', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildIsNotNull', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildPtrDiff2', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildFence', {symbol.voidPtr, symbol.int, symbol.int, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildAtomicRMW', {symbol.voidPtr, symbol.int, symbol.voidPtr, symbol.voidPtr, symbol.int, symbol.int}, symbol.voidPtr)
    ffi.cfunc('LLVMBuildAtomicCmpXchg', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.voidPtr, symbol.int, symbol.int, symbol.int}, symbol.voidPtr)
    ffi.cfunc('LLVMGetNumMaskElements', {symbol.voidPtr}, symbol.uint)
    ffi.cfunc('LLVMGetUndefMaskElem', {_}, symbol.int)
    ffi.cfunc('LLVMGetMaskValue', {symbol.voidPtr, symbol.uint}, symbol.int)
    ffi.cfunc('LLVMIsAtomicSingleThread', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetAtomicSingleThread', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMGetCmpXchgSuccessOrdering', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetCmpXchgSuccessOrdering', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMGetCmpXchgFailureOrdering', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMSetCmpXchgFailureOrdering', {symbol.voidPtr, symbol.int}, symbol.void)
    ffi.cfunc('LLVMCreateModuleProviderForExistingModule', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMDisposeModuleProvider', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMCreateMemoryBufferWithContentsOfFile', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMCreateMemoryBufferWithSTDIN', {symbol.voidPtr, symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMCreateMemoryBufferWithMemoryRange', {symbol.voidPtr, symbol.long, symbol.voidPtr, symbol.int}, symbol.voidPtr)
    ffi.cfunc('LLVMCreateMemoryBufferWithMemoryRangeCopy', {symbol.voidPtr, symbol.long, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetBufferStart', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetBufferSize', {symbol.voidPtr}, symbol.long)
    ffi.cfunc('LLVMDisposeMemoryBuffer', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMCreatePassManager', {_}, symbol.voidPtr)
    ffi.cfunc('LLVMCreateFunctionPassManagerForModule', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMCreateFunctionPassManager', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMRunPassManager', {symbol.voidPtr, symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMInitializeFunctionPassManager', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMRunFunctionPassManager', {symbol.voidPtr, symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMFinalizeFunctionPassManager', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMDisposePassManager', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMStartMultithreaded', {_}, symbol.int)
    ffi.cfunc('LLVMStopMultithreaded', {_}, symbol.void)
    ffi.cfunc('LLVMIsMultithreaded', {_}, symbol.int)
    ffi.cfunc('LLVMCreateBinary', {symbol.voidPtr, symbol.voidPtr, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMDisposeBinary', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMBinaryCopyMemoryBuffer', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMBinaryGetType', {symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMMachOUniversalBinaryCopyObjectForArch', {symbol.voidPtr, symbol.voidPtr, symbol.long, symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMObjectFileCopySectionIterator', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMObjectFileIsSectionIteratorAtEnd', {symbol.voidPtr, symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMObjectFileCopySymbolIterator', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMObjectFileIsSymbolIteratorAtEnd', {symbol.voidPtr, symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMDisposeSectionIterator', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMMoveToNextSection', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMMoveToContainingSection', {symbol.voidPtr, symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMDisposeSymbolIterator', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMMoveToNextSymbol', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetSectionName', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetSectionSize', {symbol.voidPtr}, symbol.ulong)
    ffi.cfunc('LLVMGetSectionContents', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetSectionAddress', {symbol.voidPtr}, symbol.ulong)
    ffi.cfunc('LLVMGetSectionContainsSymbol', {symbol.voidPtr, symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMGetRelocations', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMDisposeRelocationIterator', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMIsRelocationIteratorAtEnd', {symbol.voidPtr, symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMMoveToNextRelocation', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetSymbolName', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetSymbolAddress', {symbol.voidPtr}, symbol.ulong)
    ffi.cfunc('LLVMGetSymbolSize', {symbol.voidPtr}, symbol.ulong)
    ffi.cfunc('LLVMGetRelocationOffset', {symbol.voidPtr}, symbol.ulong)
    ffi.cfunc('LLVMGetRelocationSymbol', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetRelocationType', {symbol.voidPtr}, symbol.ulong)
    ffi.cfunc('LLVMGetRelocationTypeName', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMGetRelocationValueString', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMCreateObjectFile', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMDisposeObjectFile', {symbol.voidPtr}, symbol.void)
    ffi.cfunc('LLVMGetSections', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsSectionIteratorAtEnd', {symbol.voidPtr, symbol.voidPtr}, symbol.int)
    ffi.cfunc('LLVMGetSymbols', {symbol.voidPtr}, symbol.voidPtr)
    ffi.cfunc('LLVMIsSymbolIteratorAtEnd', {symbol.voidPtr, symbol.voidPtr}, symbol.int)
    let lib = ffi.bindLib(Option[String].some('libLLVM.dylib'), {gen_table=false})
    return lib

-- Macros
var .GCC_HAVE_DWARF2_CFI_ASM int = 1
var .DEFAULT_TARGET_TRIPLE String = "arm64-apple-darwin22.6.0"
var .ENABLE_THREADS int = 1
var .HAS_ATOMICS int = 1
var .HOST_TRIPLE String = "arm64-apple-darwin22.6.0"
var .ON_UNIX int = 1
var .USE_INTEL_JITEVENTS int = 0
var .USE_OPROFILE int = 0
var .USE_PERF int = 0
var .VERSION_MAJOR int = 17
var .VERSION_MINOR int = 0
var .VERSION_PATCH int = 6
var .VERSION_STRING String = "17.0.6"
var .FORCE_ENABLE_STATS int = 0
var .WITH_Z3 int = 1
var .ENABLE_ZLIB int = 1
var .ENABLE_ZSTD int = 1
var .HAVE_SYSEXITS_H int = 1
var .HAVE_LIBXAR int = 1
var .UNREACHABLE_OPTIMIZE int = 1
var .ENABLE_DIA_SDK int = 0
